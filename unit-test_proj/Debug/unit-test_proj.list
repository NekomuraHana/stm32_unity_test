
unit-test_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800352c  0800352c  0001352c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f0  080036f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080036f0  080036f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036f0  080036f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036f0  080036f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036f4  080036f4  000136f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080036f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000104  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000174  20000174  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b554  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d5b  00000000  00000000  0002b5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  0002d350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ab0  00000000  00000000  0002df18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dfaa  00000000  00000000  0002e9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e26f  00000000  00000000  0004c972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be245  00000000  00000000  0005abe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00118e26  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003648  00000000  00000000  00118e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003514 	.word	0x08003514

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003514 	.word	0x08003514

080001c8 <setjmp>:
 80001c8:	46ec      	mov	ip, sp
 80001ca:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001ce:	f04f 0000 	mov.w	r0, #0
 80001d2:	4770      	bx	lr

080001d4 <longjmp>:
 80001d4:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001d8:	46e5      	mov	sp, ip
 80001da:	0008      	movs	r0, r1
 80001dc:	bf08      	it	eq
 80001de:	2001      	moveq	r0, #1
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop

080001e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80001ea:	4b15      	ldr	r3, [pc, #84]	; (8000240 <MX_GPIO_Init+0x5c>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a14      	ldr	r2, [pc, #80]	; (8000240 <MX_GPIO_Init+0x5c>)
 80001f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b12      	ldr	r3, [pc, #72]	; (8000240 <MX_GPIO_Init+0x5c>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80001fe:	60fb      	str	r3, [r7, #12]
 8000200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000202:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <MX_GPIO_Init+0x5c>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a0e      	ldr	r2, [pc, #56]	; (8000240 <MX_GPIO_Init+0x5c>)
 8000208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800020c:	6153      	str	r3, [r2, #20]
 800020e:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <MX_GPIO_Init+0x5c>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000216:	60bb      	str	r3, [r7, #8]
 8000218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800021a:	4b09      	ldr	r3, [pc, #36]	; (8000240 <MX_GPIO_Init+0x5c>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	4a08      	ldr	r2, [pc, #32]	; (8000240 <MX_GPIO_Init+0x5c>)
 8000220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000224:	6153      	str	r3, [r2, #20]
 8000226:	4b06      	ldr	r3, [pc, #24]	; (8000240 <MX_GPIO_Init+0x5c>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	687b      	ldr	r3, [r7, #4]

}
 8000232:	bf00      	nop
 8000234:	3714      	adds	r7, #20
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	40021000 	.word	0x40021000

08000244 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800024c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000250:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000254:	f003 0301 	and.w	r3, r3, #1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d013      	beq.n	8000284 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800025c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000260:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000264:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000268:	2b00      	cmp	r3, #0
 800026a:	d00b      	beq.n	8000284 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800026c:	e000      	b.n	8000270 <ITM_SendChar+0x2c>
    {
      __NOP();
 800026e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000270:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d0f9      	beq.n	800026e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800027a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	b2d2      	uxtb	r2, r2
 8000282:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000284:	687b      	ldr	r3, [r7, #4]
}
 8000286:	4618      	mov	r0, r3
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
	...

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 fa68 	bl	800076c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f80e 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f7ff ffa0 	bl	80001e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  mainTest();
 80002a4:	f000 fa4c 	bl	8000740 <mainTest>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    printf("this is main loop\r\n");
 80002a8:	4803      	ldr	r0, [pc, #12]	; (80002b8 <main+0x24>)
 80002aa:	f002 fc5b 	bl	8002b64 <puts>
	    HAL_Delay(1000);
 80002ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b2:	f000 fa91 	bl	80007d8 <HAL_Delay>
	    printf("this is main loop\r\n");
 80002b6:	e7f7      	b.n	80002a8 <main+0x14>
 80002b8:	0800352c 	.word	0x0800352c

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b090      	sub	sp, #64	; 0x40
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	2228      	movs	r2, #40	; 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 fbbe 	bl	8002a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002de:	2302      	movs	r3, #2
 80002e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e2:	2301      	movs	r3, #1
 80002e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e6:	2310      	movs	r3, #16
 80002e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ea:	2300      	movs	r3, #0
 80002ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 fb76 	bl	80009e4 <HAL_RCC_OscConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002fe:	f000 f847 	bl	8000390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	230f      	movs	r3, #15
 8000304:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000306:	2300      	movs	r3, #0
 8000308:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f001 fba0 	bl	8001a60 <HAL_RCC_ClockConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000326:	f000 f833 	bl	8000390 <Error_Handler>
  }
}
 800032a:	bf00      	nop
 800032c:	3740      	adds	r7, #64	; 0x40
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}

08000332 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000332:	b580      	push	{r7, lr}
 8000334:	b086      	sub	sp, #24
 8000336:	af00      	add	r7, sp, #0
 8000338:	60f8      	str	r0, [r7, #12]
 800033a:	60b9      	str	r1, [r7, #8]
 800033c:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]
 8000342:	e009      	b.n	8000358 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	1c5a      	adds	r2, r3, #1
 8000348:	60ba      	str	r2, [r7, #8]
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff79 	bl	8000244 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8000352:	697b      	ldr	r3, [r7, #20]
 8000354:	3301      	adds	r3, #1
 8000356:	617b      	str	r3, [r7, #20]
 8000358:	697a      	ldr	r2, [r7, #20]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	429a      	cmp	r2, r3
 800035e:	dbf1      	blt.n	8000344 <_write+0x12>
  }
  return len;
 8000360:	687b      	ldr	r3, [r7, #4]
}
 8000362:	4618      	mov	r0, r3
 8000364:	3718      	adds	r7, #24
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a04      	ldr	r2, [pc, #16]	; (800038c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d101      	bne.n	8000382 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800037e:	f000 fa0b 	bl	8000798 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40012c00 	.word	0x40012c00

08000390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000394:	b672      	cpsid	i
}
 8000396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000398:	e7fe      	b.n	8000398 <Error_Handler+0x8>
	...

0800039c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <HAL_MspInit+0x44>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a0e      	ldr	r2, [pc, #56]	; (80003e0 <HAL_MspInit+0x44>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6193      	str	r3, [r2, #24]
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <HAL_MspInit+0x44>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <HAL_MspInit+0x44>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	4a08      	ldr	r2, [pc, #32]	; (80003e0 <HAL_MspInit+0x44>)
 80003c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c4:	61d3      	str	r3, [r2, #28]
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <HAL_MspInit+0x44>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ce:	603b      	str	r3, [r7, #0]
 80003d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000

080003e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08c      	sub	sp, #48	; 0x30
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80003ec:	2300      	movs	r3, #0
 80003ee:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80003f0:	2300      	movs	r3, #0
 80003f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80003f4:	4b2e      	ldr	r3, [pc, #184]	; (80004b0 <HAL_InitTick+0xcc>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a2d      	ldr	r2, [pc, #180]	; (80004b0 <HAL_InitTick+0xcc>)
 80003fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b2b      	ldr	r3, [pc, #172]	; (80004b0 <HAL_InitTick+0xcc>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800040c:	f107 020c 	add.w	r2, r7, #12
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4611      	mov	r1, r2
 8000416:	4618      	mov	r0, r3
 8000418:	f001 fd36 	bl	8001e88 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800041c:	f001 fd12 	bl	8001e44 <HAL_RCC_GetPCLK2Freq>
 8000420:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000424:	4a23      	ldr	r2, [pc, #140]	; (80004b4 <HAL_InitTick+0xd0>)
 8000426:	fba2 2303 	umull	r2, r3, r2, r3
 800042a:	0c9b      	lsrs	r3, r3, #18
 800042c:	3b01      	subs	r3, #1
 800042e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000430:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <HAL_InitTick+0xd4>)
 8000432:	4a22      	ldr	r2, [pc, #136]	; (80004bc <HAL_InitTick+0xd8>)
 8000434:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000436:	4b20      	ldr	r3, [pc, #128]	; (80004b8 <HAL_InitTick+0xd4>)
 8000438:	f240 32e7 	movw	r2, #999	; 0x3e7
 800043c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800043e:	4a1e      	ldr	r2, [pc, #120]	; (80004b8 <HAL_InitTick+0xd4>)
 8000440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000442:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000444:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <HAL_InitTick+0xd4>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044a:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <HAL_InitTick+0xd4>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000450:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <HAL_InitTick+0xd4>)
 8000452:	2200      	movs	r2, #0
 8000454:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000456:	4818      	ldr	r0, [pc, #96]	; (80004b8 <HAL_InitTick+0xd4>)
 8000458:	f001 fd48 	bl	8001eec <HAL_TIM_Base_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000462:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000466:	2b00      	cmp	r3, #0
 8000468:	d11b      	bne.n	80004a2 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800046a:	4813      	ldr	r0, [pc, #76]	; (80004b8 <HAL_InitTick+0xd4>)
 800046c:	f001 fda0 	bl	8001fb0 <HAL_TIM_Base_Start_IT>
 8000470:	4603      	mov	r3, r0
 8000472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800047a:	2b00      	cmp	r3, #0
 800047c:	d111      	bne.n	80004a2 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800047e:	2019      	movs	r0, #25
 8000480:	f000 faa2 	bl	80009c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b0f      	cmp	r3, #15
 8000488:	d808      	bhi.n	800049c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800048a:	2200      	movs	r2, #0
 800048c:	6879      	ldr	r1, [r7, #4]
 800048e:	2019      	movs	r0, #25
 8000490:	f000 fa7e 	bl	8000990 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000494:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <HAL_InitTick+0xdc>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	6013      	str	r3, [r2, #0]
 800049a:	e002      	b.n	80004a2 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800049c:	2301      	movs	r3, #1
 800049e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80004a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3730      	adds	r7, #48	; 0x30
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	431bde83 	.word	0x431bde83
 80004b8:	2000008c 	.word	0x2000008c
 80004bc:	40012c00 	.word	0x40012c00
 80004c0:	20000004 	.word	0x20000004

080004c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <NMI_Handler+0x4>

080004ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <HardFault_Handler+0x4>

080004d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <MemManage_Handler+0x4>

080004d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <BusFault_Handler+0x4>

080004dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <UsageFault_Handler+0x4>

080004e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
	...

0800051c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000520:	4802      	ldr	r0, [pc, #8]	; (800052c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000522:	f001 fda1 	bl	8002068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	2000008c 	.word	0x2000008c

08000530 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	e00a      	b.n	8000558 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000542:	f3af 8000 	nop.w
 8000546:	4601      	mov	r1, r0
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	1c5a      	adds	r2, r3, #1
 800054c:	60ba      	str	r2, [r7, #8]
 800054e:	b2ca      	uxtb	r2, r1
 8000550:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	3301      	adds	r3, #1
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	697a      	ldr	r2, [r7, #20]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	429a      	cmp	r2, r3
 800055e:	dbf0      	blt.n	8000542 <_read+0x12>
  }

  return len;
 8000560:	687b      	ldr	r3, [r7, #4]
}
 8000562:	4618      	mov	r0, r3
 8000564:	3718      	adds	r7, #24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <_close>:
  }
  return len;
}

int _close(int file)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000572:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000576:	4618      	mov	r0, r3
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000592:	605a      	str	r2, [r3, #4]
  return 0;
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <_isatty>:

int _isatty(int file)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005aa:	2301      	movs	r3, #1
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005dc:	4a14      	ldr	r2, [pc, #80]	; (8000630 <_sbrk+0x5c>)
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <_sbrk+0x60>)
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <_sbrk+0x64>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d102      	bne.n	80005f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <_sbrk+0x64>)
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <_sbrk+0x68>)
 80005f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <_sbrk+0x64>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	429a      	cmp	r2, r3
 8000602:	d207      	bcs.n	8000614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000604:	f002 f9f8 	bl	80029f8 <__errno>
 8000608:	4603      	mov	r3, r0
 800060a:	220c      	movs	r2, #12
 800060c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	e009      	b.n	8000628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <_sbrk+0x64>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	4a05      	ldr	r2, [pc, #20]	; (8000638 <_sbrk+0x64>)
 8000624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000626:	68fb      	ldr	r3, [r7, #12]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20003000 	.word	0x20003000
 8000634:	00000400 	.word	0x00000400
 8000638:	200000d8 	.word	0x200000d8
 800063c:	20000178 	.word	0x20000178

08000640 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <SystemInit+0x20>)
 8000646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800064a:	4a05      	ldr	r2, [pc, #20]	; (8000660 <SystemInit+0x20>)
 800064c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800069c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000668:	f7ff ffea 	bl	8000640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800066e:	490d      	ldr	r1, [pc, #52]	; (80006a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000670:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <LoopForever+0xe>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000684:	4c0a      	ldr	r4, [pc, #40]	; (80006b0 <LoopForever+0x16>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000692:	f002 f9b7 	bl	8002a04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000696:	f7ff fdfd 	bl	8000294 <main>

0800069a <LoopForever>:

LoopForever:
    b LoopForever
 800069a:	e7fe      	b.n	800069a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800069c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006a8:	080036f8 	.word	0x080036f8
  ldr r2, =_sbss
 80006ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006b0:	20000174 	.word	0x20000174

080006b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC1_2_IRQHandler>

080006b6 <TestCase1>:
 *  Created on: 2023/06/11
 *      Author: dev_server
 */
#include "case1.h"

void TestCase1(){
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af02      	add	r7, sp, #8
	TEST_ASSERT_EQUAL_INT(3,add(1,2));
 80006bc:	2102      	movs	r1, #2
 80006be:	2001      	movs	r0, #1
 80006c0:	f002 f988 	bl	80029d4 <add>
 80006c4:	4601      	mov	r1, r0
 80006c6:	2314      	movs	r3, #20
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	230a      	movs	r3, #10
 80006cc:	2200      	movs	r2, #0
 80006ce:	2003      	movs	r0, #3
 80006d0:	f002 f876 	bl	80027c0 <UnityAssertEqualNumber>
	TEST_ASSERT_EQUAL_INT(3,add(1,2));
 80006d4:	2102      	movs	r1, #2
 80006d6:	2001      	movs	r0, #1
 80006d8:	f002 f97c 	bl	80029d4 <add>
 80006dc:	4601      	mov	r1, r0
 80006de:	2314      	movs	r3, #20
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	230b      	movs	r3, #11
 80006e4:	2200      	movs	r2, #0
 80006e6:	2003      	movs	r0, #3
 80006e8:	f002 f86a 	bl	80027c0 <UnityAssertEqualNumber>
	TEST_ASSERT_EQUAL_INT(5,add(2,3));
 80006ec:	2103      	movs	r1, #3
 80006ee:	2002      	movs	r0, #2
 80006f0:	f002 f970 	bl	80029d4 <add>
 80006f4:	4601      	mov	r1, r0
 80006f6:	2314      	movs	r3, #20
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	230c      	movs	r3, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	2005      	movs	r0, #5
 8000700:	f002 f85e 	bl	80027c0 <UnityAssertEqualNumber>
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <setUp>:
 */

#include "test_runner.h"

void setUp(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	TEST_MESSAGE("init test data");
 8000710:	210c      	movs	r1, #12
 8000712:	4804      	ldr	r0, [pc, #16]	; (8000724 <setUp+0x18>)
 8000714:	f002 f894 	bl	8002840 <UnityMessage>
	TEST_MESSAGE("test begin");
 8000718:	210d      	movs	r1, #13
 800071a:	4803      	ldr	r0, [pc, #12]	; (8000728 <setUp+0x1c>)
 800071c:	f002 f890 	bl	8002840 <UnityMessage>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	08003540 	.word	0x08003540
 8000728:	08003550 	.word	0x08003550

0800072c <tearDown>:

void tearDown(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	TEST_MESSAGE("test is down");
 8000730:	2112      	movs	r1, #18
 8000732:	4802      	ldr	r0, [pc, #8]	; (800073c <tearDown+0x10>)
 8000734:	f002 f884 	bl	8002840 <UnityMessage>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	0800355c 	.word	0x0800355c

08000740 <mainTest>:

/**
 * main test function
 */

int mainTest(void){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	UnityBegin("mainTest");
 8000744:	4806      	ldr	r0, [pc, #24]	; (8000760 <mainTest+0x20>)
 8000746:	f002 f8d5 	bl	80028f4 <UnityBegin>
	RUN_TEST(TestCase1);
 800074a:	221b      	movs	r2, #27
 800074c:	4905      	ldr	r1, [pc, #20]	; (8000764 <mainTest+0x24>)
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <mainTest+0x28>)
 8000750:	f002 f89c 	bl	800288c <UnityDefaultTestRun>
	return(UnityEnd());
 8000754:	f002 f8f8 	bl	8002948 <UnityEnd>
 8000758:	4603      	mov	r3, r0
}
 800075a:	4618      	mov	r0, r3
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	0800356c 	.word	0x0800356c
 8000764:	08003578 	.word	0x08003578
 8000768:	080006b7 	.word	0x080006b7

0800076c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_Init+0x28>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a07      	ldr	r2, [pc, #28]	; (8000794 <HAL_Init+0x28>)
 8000776:	f043 0310 	orr.w	r3, r3, #16
 800077a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800077c:	2003      	movs	r0, #3
 800077e:	f000 f8fc 	bl	800097a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000782:	200f      	movs	r0, #15
 8000784:	f7ff fe2e 	bl	80003e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000788:	f7ff fe08 	bl	800039c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40022000 	.word	0x40022000

08000798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_IncTick+0x20>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_IncTick+0x24>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <HAL_IncTick+0x24>)
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000008 	.word	0x20000008
 80007bc:	200000dc 	.word	0x200000dc

080007c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <HAL_GetTick+0x14>)
 80007c6:	681b      	ldr	r3, [r3, #0]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	200000dc 	.word	0x200000dc

080007d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e0:	f7ff ffee 	bl	80007c0 <HAL_GetTick>
 80007e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f0:	d005      	beq.n	80007fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_Delay+0x44>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007fe:	bf00      	nop
 8000800:	f7ff ffde 	bl	80007c0 <HAL_GetTick>
 8000804:	4602      	mov	r2, r0
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	429a      	cmp	r2, r3
 800080e:	d8f7      	bhi.n	8000800 <HAL_Delay+0x28>
  {
  }
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000008 	.word	0x20000008

08000820 <__NVIC_SetPriorityGrouping>:
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800083c:	4013      	ands	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	60d3      	str	r3, [r2, #12]
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <__NVIC_GetPriorityGrouping>:
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <__NVIC_GetPriorityGrouping+0x18>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	0a1b      	lsrs	r3, r3, #8
 8000872:	f003 0307 	and.w	r3, r3, #7
}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_EnableIRQ>:
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	2b00      	cmp	r3, #0
 8000894:	db0b      	blt.n	80008ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	f003 021f 	and.w	r2, r3, #31
 800089c:	4907      	ldr	r1, [pc, #28]	; (80008bc <__NVIC_EnableIRQ+0x38>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	095b      	lsrs	r3, r3, #5
 80008a4:	2001      	movs	r0, #1
 80008a6:	fa00 f202 	lsl.w	r2, r0, r2
 80008aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000e100 	.word	0xe000e100

080008c0 <__NVIC_SetPriority>:
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db0a      	blt.n	80008ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	490c      	ldr	r1, [pc, #48]	; (800090c <__NVIC_SetPriority+0x4c>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	0112      	lsls	r2, r2, #4
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80008e8:	e00a      	b.n	8000900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4908      	ldr	r1, [pc, #32]	; (8000910 <__NVIC_SetPriority+0x50>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	3b04      	subs	r3, #4
 80008f8:	0112      	lsls	r2, r2, #4
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	440b      	add	r3, r1
 80008fe:	761a      	strb	r2, [r3, #24]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <NVIC_EncodePriority>:
{
 8000914:	b480      	push	{r7}
 8000916:	b089      	sub	sp, #36	; 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f1c3 0307 	rsb	r3, r3, #7
 800092e:	2b04      	cmp	r3, #4
 8000930:	bf28      	it	cs
 8000932:	2304      	movcs	r3, #4
 8000934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3304      	adds	r3, #4
 800093a:	2b06      	cmp	r3, #6
 800093c:	d902      	bls.n	8000944 <NVIC_EncodePriority+0x30>
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3b03      	subs	r3, #3
 8000942:	e000      	b.n	8000946 <NVIC_EncodePriority+0x32>
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	f04f 32ff 	mov.w	r2, #4294967295
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43da      	mvns	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	401a      	ands	r2, r3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095c:	f04f 31ff 	mov.w	r1, #4294967295
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	43d9      	mvns	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	4313      	orrs	r3, r2
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	; 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ff4c 	bl	8000820 <__NVIC_SetPriorityGrouping>
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
 800099c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a2:	f7ff ff61 	bl	8000868 <__NVIC_GetPriorityGrouping>
 80009a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	68b9      	ldr	r1, [r7, #8]
 80009ac:	6978      	ldr	r0, [r7, #20]
 80009ae:	f7ff ffb1 	bl	8000914 <NVIC_EncodePriority>
 80009b2:	4602      	mov	r2, r0
 80009b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b8:	4611      	mov	r1, r2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff80 	bl	80008c0 <__NVIC_SetPriority>
}
 80009c0:	bf00      	nop
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff54 	bl	8000884 <__NVIC_EnableIRQ>
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80009f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80009f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80009fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	f001 b823 	b.w	8001a50 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000a0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f000 817d 	beq.w	8000d1a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a20:	4bbc      	ldr	r3, [pc, #752]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f003 030c 	and.w	r3, r3, #12
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d00c      	beq.n	8000a46 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a2c:	4bb9      	ldr	r3, [pc, #740]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f003 030c 	and.w	r3, r3, #12
 8000a34:	2b08      	cmp	r3, #8
 8000a36:	d15c      	bne.n	8000af2 <HAL_RCC_OscConfig+0x10e>
 8000a38:	4bb6      	ldr	r3, [pc, #728]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a44:	d155      	bne.n	8000af2 <HAL_RCC_OscConfig+0x10e>
 8000a46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a4a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000a52:	fa93 f3a3 	rbit	r3, r3
 8000a56:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a5e:	fab3 f383 	clz	r3, r3
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	095b      	lsrs	r3, r3, #5
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d102      	bne.n	8000a78 <HAL_RCC_OscConfig+0x94>
 8000a72:	4ba8      	ldr	r3, [pc, #672]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	e015      	b.n	8000aa4 <HAL_RCC_OscConfig+0xc0>
 8000a78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a7c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a80:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000a84:	fa93 f3a3 	rbit	r3, r3
 8000a88:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000a8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a90:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000a94:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000a98:	fa93 f3a3 	rbit	r3, r3
 8000a9c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000aa0:	4b9c      	ldr	r3, [pc, #624]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000aa8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000aac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000ab0:	fa92 f2a2 	rbit	r2, r2
 8000ab4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000ab8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000abc:	fab2 f282 	clz	r2, r2
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	f042 0220 	orr.w	r2, r2, #32
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	f002 021f 	and.w	r2, r2, #31
 8000acc:	2101      	movs	r1, #1
 8000ace:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	f000 811f 	beq.w	8000d18 <HAL_RCC_OscConfig+0x334>
 8000ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ade:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8116 	bne.w	8000d18 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	f000 bfaf 	b.w	8001a50 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b02:	d106      	bne.n	8000b12 <HAL_RCC_OscConfig+0x12e>
 8000b04:	4b83      	ldr	r3, [pc, #524]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a82      	ldr	r2, [pc, #520]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	e036      	b.n	8000b80 <HAL_RCC_OscConfig+0x19c>
 8000b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d10c      	bne.n	8000b3c <HAL_RCC_OscConfig+0x158>
 8000b22:	4b7c      	ldr	r3, [pc, #496]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a7b      	ldr	r2, [pc, #492]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b2c:	6013      	str	r3, [r2, #0]
 8000b2e:	4b79      	ldr	r3, [pc, #484]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a78      	ldr	r2, [pc, #480]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	e021      	b.n	8000b80 <HAL_RCC_OscConfig+0x19c>
 8000b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b4c:	d10c      	bne.n	8000b68 <HAL_RCC_OscConfig+0x184>
 8000b4e:	4b71      	ldr	r3, [pc, #452]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a70      	ldr	r2, [pc, #448]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	4b6e      	ldr	r3, [pc, #440]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a6d      	ldr	r2, [pc, #436]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e00b      	b.n	8000b80 <HAL_RCC_OscConfig+0x19c>
 8000b68:	4b6a      	ldr	r3, [pc, #424]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a69      	ldr	r2, [pc, #420]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b67      	ldr	r3, [pc, #412]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a66      	ldr	r2, [pc, #408]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b80:	4b64      	ldr	r3, [pc, #400]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b84:	f023 020f 	bic.w	r2, r3, #15
 8000b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	495f      	ldr	r1, [pc, #380]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000b96:	4313      	orrs	r3, r2
 8000b98:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d059      	beq.n	8000c5e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000baa:	f7ff fe09 	bl	80007c0 <HAL_GetTick>
 8000bae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb2:	e00a      	b.n	8000bca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bb4:	f7ff fe04 	bl	80007c0 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	2b64      	cmp	r3, #100	; 0x64
 8000bc2:	d902      	bls.n	8000bca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	f000 bf43 	b.w	8001a50 <HAL_RCC_OscConfig+0x106c>
 8000bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bce:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bd2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000bd6:	fa93 f3a3 	rbit	r3, r3
 8000bda:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000bde:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be2:	fab3 f383 	clz	r3, r3
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	095b      	lsrs	r3, r3, #5
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d102      	bne.n	8000bfc <HAL_RCC_OscConfig+0x218>
 8000bf6:	4b47      	ldr	r3, [pc, #284]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	e015      	b.n	8000c28 <HAL_RCC_OscConfig+0x244>
 8000bfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c00:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c04:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000c08:	fa93 f3a3 	rbit	r3, r3
 8000c0c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c14:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000c18:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000c1c:	fa93 f3a3 	rbit	r3, r3
 8000c20:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000c24:	4b3b      	ldr	r3, [pc, #236]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c2c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000c30:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000c34:	fa92 f2a2 	rbit	r2, r2
 8000c38:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000c3c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	f042 0220 	orr.w	r2, r2, #32
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	f002 021f 	and.w	r2, r2, #31
 8000c50:	2101      	movs	r1, #1
 8000c52:	fa01 f202 	lsl.w	r2, r1, r2
 8000c56:	4013      	ands	r3, r2
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0ab      	beq.n	8000bb4 <HAL_RCC_OscConfig+0x1d0>
 8000c5c:	e05d      	b.n	8000d1a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5e:	f7ff fdaf 	bl	80007c0 <HAL_GetTick>
 8000c62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c66:	e00a      	b.n	8000c7e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c68:	f7ff fdaa 	bl	80007c0 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	2b64      	cmp	r3, #100	; 0x64
 8000c76:	d902      	bls.n	8000c7e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	f000 bee9 	b.w	8001a50 <HAL_RCC_OscConfig+0x106c>
 8000c7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c82:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000c8a:	fa93 f3a3 	rbit	r3, r3
 8000c8e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000c92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c96:	fab3 f383 	clz	r3, r3
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	095b      	lsrs	r3, r3, #5
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d102      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x2cc>
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	e015      	b.n	8000cdc <HAL_RCC_OscConfig+0x2f8>
 8000cb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000cbc:	fa93 f3a3 	rbit	r3, r3
 8000cc0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000cc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cc8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000ccc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000cd0:	fa93 f3a3 	rbit	r3, r3
 8000cd4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_RCC_OscConfig+0x330>)
 8000cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ce0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000ce4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000ce8:	fa92 f2a2 	rbit	r2, r2
 8000cec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000cf0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	f042 0220 	orr.w	r2, r2, #32
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	f002 021f 	and.w	r2, r2, #31
 8000d04:	2101      	movs	r1, #1
 8000d06:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1ab      	bne.n	8000c68 <HAL_RCC_OscConfig+0x284>
 8000d10:	e003      	b.n	8000d1a <HAL_RCC_OscConfig+0x336>
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 817d 	beq.w	800102a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d30:	4ba6      	ldr	r3, [pc, #664]	; (8000fcc <HAL_RCC_OscConfig+0x5e8>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 030c 	and.w	r3, r3, #12
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00b      	beq.n	8000d54 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d3c:	4ba3      	ldr	r3, [pc, #652]	; (8000fcc <HAL_RCC_OscConfig+0x5e8>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 030c 	and.w	r3, r3, #12
 8000d44:	2b08      	cmp	r3, #8
 8000d46:	d172      	bne.n	8000e2e <HAL_RCC_OscConfig+0x44a>
 8000d48:	4ba0      	ldr	r3, [pc, #640]	; (8000fcc <HAL_RCC_OscConfig+0x5e8>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d16c      	bne.n	8000e2e <HAL_RCC_OscConfig+0x44a>
 8000d54:	2302      	movs	r3, #2
 8000d56:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000d5e:	fa93 f3a3 	rbit	r3, r3
 8000d62:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000d66:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d6a:	fab3 f383 	clz	r3, r3
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	095b      	lsrs	r3, r3, #5
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d102      	bne.n	8000d84 <HAL_RCC_OscConfig+0x3a0>
 8000d7e:	4b93      	ldr	r3, [pc, #588]	; (8000fcc <HAL_RCC_OscConfig+0x5e8>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	e013      	b.n	8000dac <HAL_RCC_OscConfig+0x3c8>
 8000d84:	2302      	movs	r3, #2
 8000d86:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000d8e:	fa93 f3a3 	rbit	r3, r3
 8000d92:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000d96:	2302      	movs	r3, #2
 8000d98:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000d9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000da0:	fa93 f3a3 	rbit	r3, r3
 8000da4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000da8:	4b88      	ldr	r3, [pc, #544]	; (8000fcc <HAL_RCC_OscConfig+0x5e8>)
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	2202      	movs	r2, #2
 8000dae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000db2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000db6:	fa92 f2a2 	rbit	r2, r2
 8000dba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000dbe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000dc2:	fab2 f282 	clz	r2, r2
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	f042 0220 	orr.w	r2, r2, #32
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	f002 021f 	and.w	r2, r2, #31
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd8:	4013      	ands	r3, r2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00a      	beq.n	8000df4 <HAL_RCC_OscConfig+0x410>
 8000dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000de2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d002      	beq.n	8000df4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f000 be2e 	b.w	8001a50 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df4:	4b75      	ldr	r3, [pc, #468]	; (8000fcc <HAL_RCC_OscConfig+0x5e8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	21f8      	movs	r1, #248	; 0xf8
 8000e0a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e0e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000e12:	fa91 f1a1 	rbit	r1, r1
 8000e16:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000e1a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000e1e:	fab1 f181 	clz	r1, r1
 8000e22:	b2c9      	uxtb	r1, r1
 8000e24:	408b      	lsls	r3, r1
 8000e26:	4969      	ldr	r1, [pc, #420]	; (8000fcc <HAL_RCC_OscConfig+0x5e8>)
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2c:	e0fd      	b.n	800102a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 8088 	beq.w	8000f50 <HAL_RCC_OscConfig+0x56c>
 8000e40:	2301      	movs	r3, #1
 8000e42:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e46:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000e4a:	fa93 f3a3 	rbit	r3, r3
 8000e4e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000e52:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e56:	fab3 f383 	clz	r3, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	461a      	mov	r2, r3
 8000e68:	2301      	movs	r3, #1
 8000e6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fca8 	bl	80007c0 <HAL_GetTick>
 8000e70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e74:	e00a      	b.n	8000e8c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e76:	f7ff fca3 	bl	80007c0 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d902      	bls.n	8000e8c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	f000 bde2 	b.w	8001a50 <HAL_RCC_OscConfig+0x106c>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e92:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000e96:	fa93 f3a3 	rbit	r3, r3
 8000e9a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000e9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea2:	fab3 f383 	clz	r3, r3
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	095b      	lsrs	r3, r3, #5
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d102      	bne.n	8000ebc <HAL_RCC_OscConfig+0x4d8>
 8000eb6:	4b45      	ldr	r3, [pc, #276]	; (8000fcc <HAL_RCC_OscConfig+0x5e8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	e013      	b.n	8000ee4 <HAL_RCC_OscConfig+0x500>
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000ec6:	fa93 f3a3 	rbit	r3, r3
 8000eca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000ece:	2302      	movs	r3, #2
 8000ed0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000ed4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000ed8:	fa93 f3a3 	rbit	r3, r3
 8000edc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000ee0:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <HAL_RCC_OscConfig+0x5e8>)
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000eea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000eee:	fa92 f2a2 	rbit	r2, r2
 8000ef2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000ef6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000efa:	fab2 f282 	clz	r2, r2
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	f042 0220 	orr.w	r2, r2, #32
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	f002 021f 	and.w	r2, r2, #31
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0af      	beq.n	8000e76 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <HAL_RCC_OscConfig+0x5e8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	21f8      	movs	r1, #248	; 0xf8
 8000f2c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000f34:	fa91 f1a1 	rbit	r1, r1
 8000f38:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8000f3c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000f40:	fab1 f181 	clz	r1, r1
 8000f44:	b2c9      	uxtb	r1, r1
 8000f46:	408b      	lsls	r3, r1
 8000f48:	4920      	ldr	r1, [pc, #128]	; (8000fcc <HAL_RCC_OscConfig+0x5e8>)
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	600b      	str	r3, [r1, #0]
 8000f4e:	e06c      	b.n	800102a <HAL_RCC_OscConfig+0x646>
 8000f50:	2301      	movs	r3, #1
 8000f52:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000f5a:	fa93 f3a3 	rbit	r3, r3
 8000f5e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8000f62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f66:	fab3 f383 	clz	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	461a      	mov	r2, r3
 8000f78:	2300      	movs	r3, #0
 8000f7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fc20 	bl	80007c0 <HAL_GetTick>
 8000f80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f84:	e00a      	b.n	8000f9c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f86:	f7ff fc1b 	bl	80007c0 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d902      	bls.n	8000f9c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	f000 bd5a 	b.w	8001a50 <HAL_RCC_OscConfig+0x106c>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8000fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb2:	fab3 f383 	clz	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	095b      	lsrs	r3, r3, #5
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d104      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x5ec>
 8000fc6:	4b01      	ldr	r3, [pc, #4]	; (8000fcc <HAL_RCC_OscConfig+0x5e8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	e015      	b.n	8000ff8 <HAL_RCC_OscConfig+0x614>
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000fda:	fa93 f3a3 	rbit	r3, r3
 8000fde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000fe8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000fec:	fa93 f3a3 	rbit	r3, r3
 8000ff0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000ff4:	4bc8      	ldr	r3, [pc, #800]	; (8001318 <HAL_RCC_OscConfig+0x934>)
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8000ffe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001002:	fa92 f2a2 	rbit	r2, r2
 8001006:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800100a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800100e:	fab2 f282 	clz	r2, r2
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	f042 0220 	orr.w	r2, r2, #32
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	f002 021f 	and.w	r2, r2, #31
 800101e:	2101      	movs	r1, #1
 8001020:	fa01 f202 	lsl.w	r2, r1, r2
 8001024:	4013      	ands	r3, r2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1ad      	bne.n	8000f86 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800102a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800102e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 8110 	beq.w	8001260 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001044:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d079      	beq.n	8001144 <HAL_RCC_OscConfig+0x760>
 8001050:	2301      	movs	r3, #1
 8001052:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001056:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800105a:	fa93 f3a3 	rbit	r3, r3
 800105e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001062:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001066:	fab3 f383 	clz	r3, r3
 800106a:	b2db      	uxtb	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	4bab      	ldr	r3, [pc, #684]	; (800131c <HAL_RCC_OscConfig+0x938>)
 8001070:	4413      	add	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	461a      	mov	r2, r3
 8001076:	2301      	movs	r3, #1
 8001078:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107a:	f7ff fba1 	bl	80007c0 <HAL_GetTick>
 800107e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001082:	e00a      	b.n	800109a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001084:	f7ff fb9c 	bl	80007c0 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d902      	bls.n	800109a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	f000 bcdb 	b.w	8001a50 <HAL_RCC_OscConfig+0x106c>
 800109a:	2302      	movs	r3, #2
 800109c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80010a4:	fa93 f3a3 	rbit	r3, r3
 80010a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80010ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80010b4:	2202      	movs	r2, #2
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	fa93 f2a3 	rbit	r2, r3
 80010c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80010d8:	2202      	movs	r2, #2
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	fa93 f2a3 	rbit	r2, r3
 80010ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f4:	4b88      	ldr	r3, [pc, #544]	; (8001318 <HAL_RCC_OscConfig+0x934>)
 80010f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001100:	2102      	movs	r1, #2
 8001102:	6019      	str	r1, [r3, #0]
 8001104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001108:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	fa93 f1a3 	rbit	r1, r3
 8001112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001116:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800111a:	6019      	str	r1, [r3, #0]
  return result;
 800111c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001120:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	fab3 f383 	clz	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f003 031f 	and.w	r3, r3, #31
 8001136:	2101      	movs	r1, #1
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0a0      	beq.n	8001084 <HAL_RCC_OscConfig+0x6a0>
 8001142:	e08d      	b.n	8001260 <HAL_RCC_OscConfig+0x87c>
 8001144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001148:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001154:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	fa93 f2a3 	rbit	r2, r3
 800115e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001162:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001166:	601a      	str	r2, [r3, #0]
  return result;
 8001168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800116c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001170:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001172:	fab3 f383 	clz	r3, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	461a      	mov	r2, r3
 800117a:	4b68      	ldr	r3, [pc, #416]	; (800131c <HAL_RCC_OscConfig+0x938>)
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	461a      	mov	r2, r3
 8001182:	2300      	movs	r3, #0
 8001184:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001186:	f7ff fb1b 	bl	80007c0 <HAL_GetTick>
 800118a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118e:	e00a      	b.n	80011a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001190:	f7ff fb16 	bl	80007c0 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d902      	bls.n	80011a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	f000 bc55 	b.w	8001a50 <HAL_RCC_OscConfig+0x106c>
 80011a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80011ae:	2202      	movs	r2, #2
 80011b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	fa93 f2a3 	rbit	r2, r3
 80011c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80011d2:	2202      	movs	r2, #2
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	fa93 f2a3 	rbit	r2, r3
 80011e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80011f6:	2202      	movs	r2, #2
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	fa93 f2a3 	rbit	r2, r3
 8001208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800120c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001210:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001212:	4b41      	ldr	r3, [pc, #260]	; (8001318 <HAL_RCC_OscConfig+0x934>)
 8001214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800121a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800121e:	2102      	movs	r1, #2
 8001220:	6019      	str	r1, [r3, #0]
 8001222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001226:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	fa93 f1a3 	rbit	r1, r3
 8001230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001234:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001238:	6019      	str	r1, [r3, #0]
  return result;
 800123a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800123e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	fab3 f383 	clz	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800124e:	b2db      	uxtb	r3, r3
 8001250:	f003 031f 	and.w	r3, r3, #31
 8001254:	2101      	movs	r1, #1
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	4013      	ands	r3, r2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d197      	bne.n	8001190 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001264:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 81a1 	beq.w	80015b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800127c:	4b26      	ldr	r3, [pc, #152]	; (8001318 <HAL_RCC_OscConfig+0x934>)
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d116      	bne.n	80012b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_RCC_OscConfig+0x934>)
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	4a22      	ldr	r2, [pc, #136]	; (8001318 <HAL_RCC_OscConfig+0x934>)
 800128e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001292:	61d3      	str	r3, [r2, #28]
 8001294:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_RCC_OscConfig+0x934>)
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800129c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012a0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012aa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80012ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80012b0:	2301      	movs	r3, #1
 80012b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <HAL_RCC_OscConfig+0x93c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d11a      	bne.n	80012f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <HAL_RCC_OscConfig+0x93c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a16      	ldr	r2, [pc, #88]	; (8001320 <HAL_RCC_OscConfig+0x93c>)
 80012c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fa77 	bl	80007c0 <HAL_GetTick>
 80012d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d6:	e009      	b.n	80012ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d8:	f7ff fa72 	bl	80007c0 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b64      	cmp	r3, #100	; 0x64
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e3b1      	b.n	8001a50 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_RCC_OscConfig+0x93c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0ef      	beq.n	80012d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d10d      	bne.n	8001324 <HAL_RCC_OscConfig+0x940>
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_RCC_OscConfig+0x934>)
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	4a02      	ldr	r2, [pc, #8]	; (8001318 <HAL_RCC_OscConfig+0x934>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6213      	str	r3, [r2, #32]
 8001314:	e03c      	b.n	8001390 <HAL_RCC_OscConfig+0x9ac>
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	10908120 	.word	0x10908120
 8001320:	40007000 	.word	0x40007000
 8001324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001328:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d10c      	bne.n	800134e <HAL_RCC_OscConfig+0x96a>
 8001334:	4bc1      	ldr	r3, [pc, #772]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	4ac0      	ldr	r2, [pc, #768]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	6213      	str	r3, [r2, #32]
 8001340:	4bbe      	ldr	r3, [pc, #760]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4abd      	ldr	r2, [pc, #756]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 8001346:	f023 0304 	bic.w	r3, r3, #4
 800134a:	6213      	str	r3, [r2, #32]
 800134c:	e020      	b.n	8001390 <HAL_RCC_OscConfig+0x9ac>
 800134e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001352:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b05      	cmp	r3, #5
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x994>
 800135e:	4bb7      	ldr	r3, [pc, #732]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4ab6      	ldr	r2, [pc, #728]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6213      	str	r3, [r2, #32]
 800136a:	4bb4      	ldr	r3, [pc, #720]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4ab3      	ldr	r2, [pc, #716]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6213      	str	r3, [r2, #32]
 8001376:	e00b      	b.n	8001390 <HAL_RCC_OscConfig+0x9ac>
 8001378:	4bb0      	ldr	r3, [pc, #704]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4aaf      	ldr	r2, [pc, #700]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 800137e:	f023 0301 	bic.w	r3, r3, #1
 8001382:	6213      	str	r3, [r2, #32]
 8001384:	4bad      	ldr	r3, [pc, #692]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4aac      	ldr	r2, [pc, #688]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 800138a:	f023 0304 	bic.w	r3, r3, #4
 800138e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001394:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 8081 	beq.w	80014a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fa0d 	bl	80007c0 <HAL_GetTick>
 80013a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013aa:	e00b      	b.n	80013c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ac:	f7ff fa08 	bl	80007c0 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013bc:	4293      	cmp	r3, r2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e345      	b.n	8001a50 <HAL_RCC_OscConfig+0x106c>
 80013c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80013cc:	2202      	movs	r2, #2
 80013ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	fa93 f2a3 	rbit	r2, r3
 80013de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80013f0:	2202      	movs	r2, #2
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	fa93 f2a3 	rbit	r2, r3
 8001402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001406:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800140a:	601a      	str	r2, [r3, #0]
  return result;
 800140c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001410:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001414:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001416:	fab3 f383 	clz	r3, r3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	095b      	lsrs	r3, r3, #5
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d102      	bne.n	8001430 <HAL_RCC_OscConfig+0xa4c>
 800142a:	4b84      	ldr	r3, [pc, #528]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	e013      	b.n	8001458 <HAL_RCC_OscConfig+0xa74>
 8001430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001434:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001438:	2202      	movs	r2, #2
 800143a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001440:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	fa93 f2a3 	rbit	r2, r3
 800144a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	4b79      	ldr	r3, [pc, #484]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800145c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001460:	2102      	movs	r1, #2
 8001462:	6011      	str	r1, [r2, #0]
 8001464:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001468:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	fa92 f1a2 	rbit	r1, r2
 8001472:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001476:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800147a:	6011      	str	r1, [r2, #0]
  return result;
 800147c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001480:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	fab2 f282 	clz	r2, r2
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	f002 021f 	and.w	r2, r2, #31
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f202 	lsl.w	r2, r1, r2
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d084      	beq.n	80013ac <HAL_RCC_OscConfig+0x9c8>
 80014a2:	e07f      	b.n	80015a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a4:	f7ff f98c 	bl	80007c0 <HAL_GetTick>
 80014a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ac:	e00b      	b.n	80014c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ae:	f7ff f987 	bl	80007c0 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e2c4      	b.n	8001a50 <HAL_RCC_OscConfig+0x106c>
 80014c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80014ce:	2202      	movs	r2, #2
 80014d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	fa93 f2a3 	rbit	r2, r3
 80014e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80014f2:	2202      	movs	r2, #2
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	fa93 f2a3 	rbit	r2, r3
 8001504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001508:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800150c:	601a      	str	r2, [r3, #0]
  return result;
 800150e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001512:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001516:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001518:	fab3 f383 	clz	r3, r3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	b2db      	uxtb	r3, r3
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d102      	bne.n	8001532 <HAL_RCC_OscConfig+0xb4e>
 800152c:	4b43      	ldr	r3, [pc, #268]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	e013      	b.n	800155a <HAL_RCC_OscConfig+0xb76>
 8001532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001536:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800153a:	2202      	movs	r2, #2
 800153c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001542:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	fa93 f2a3 	rbit	r2, r3
 800154c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001550:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	4b39      	ldr	r3, [pc, #228]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800155e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001562:	2102      	movs	r1, #2
 8001564:	6011      	str	r1, [r2, #0]
 8001566:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800156a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	fa92 f1a2 	rbit	r1, r2
 8001574:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001578:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800157c:	6011      	str	r1, [r2, #0]
  return result;
 800157e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001582:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	fab2 f282 	clz	r2, r2
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	f002 021f 	and.w	r2, r2, #31
 8001598:	2101      	movs	r1, #1
 800159a:	fa01 f202 	lsl.w	r2, r1, r2
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d184      	bne.n	80014ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d105      	bne.n	80015b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	4a22      	ldr	r2, [pc, #136]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 80015b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 8242 	beq.w	8001a4e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <HAL_RCC_OscConfig+0xc58>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	f000 8213 	beq.w	80019fe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	f040 8162 	bne.w	80018ae <HAL_RCC_OscConfig+0xeca>
 80015ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80015f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	fa93 f2a3 	rbit	r2, r3
 8001606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800160e:	601a      	str	r2, [r3, #0]
  return result;
 8001610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001614:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001618:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161a:	fab3 f383 	clz	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001624:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	461a      	mov	r2, r3
 800162c:	2300      	movs	r3, #0
 800162e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff f8c6 	bl	80007c0 <HAL_GetTick>
 8001634:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001638:	e00c      	b.n	8001654 <HAL_RCC_OscConfig+0xc70>
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff f8be 	bl	80007c0 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e1fd      	b.n	8001a50 <HAL_RCC_OscConfig+0x106c>
 8001654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001658:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800165c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001666:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	fa93 f2a3 	rbit	r2, r3
 8001670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001674:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001678:	601a      	str	r2, [r3, #0]
  return result;
 800167a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001682:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001684:	fab3 f383 	clz	r3, r3
 8001688:	b2db      	uxtb	r3, r3
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b01      	cmp	r3, #1
 8001696:	d102      	bne.n	800169e <HAL_RCC_OscConfig+0xcba>
 8001698:	4bb0      	ldr	r3, [pc, #704]	; (800195c <HAL_RCC_OscConfig+0xf78>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	e027      	b.n	80016ee <HAL_RCC_OscConfig+0xd0a>
 800169e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80016a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	fa93 f2a3 	rbit	r2, r3
 80016ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80016cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	fa93 f2a3 	rbit	r2, r3
 80016e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	4b9c      	ldr	r3, [pc, #624]	; (800195c <HAL_RCC_OscConfig+0xf78>)
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016f2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80016f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80016fa:	6011      	str	r1, [r2, #0]
 80016fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001700:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	fa92 f1a2 	rbit	r1, r2
 800170a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800170e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001712:	6011      	str	r1, [r2, #0]
  return result;
 8001714:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001718:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	fab2 f282 	clz	r2, r2
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	f042 0220 	orr.w	r2, r2, #32
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	f002 021f 	and.w	r2, r2, #31
 800172e:	2101      	movs	r1, #1
 8001730:	fa01 f202 	lsl.w	r2, r1, r2
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d182      	bne.n	8001640 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800173a:	4b88      	ldr	r3, [pc, #544]	; (800195c <HAL_RCC_OscConfig+0xf78>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001746:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800174e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	430b      	orrs	r3, r1
 800175c:	497f      	ldr	r1, [pc, #508]	; (800195c <HAL_RCC_OscConfig+0xf78>)
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]
 8001762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001766:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800176a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800176e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001774:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	fa93 f2a3 	rbit	r2, r3
 800177e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001782:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001786:	601a      	str	r2, [r3, #0]
  return result;
 8001788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001790:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800179c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	461a      	mov	r2, r3
 80017a4:	2301      	movs	r3, #1
 80017a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a8:	f7ff f80a 	bl	80007c0 <HAL_GetTick>
 80017ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b0:	e009      	b.n	80017c6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b2:	f7ff f805 	bl	80007c0 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e144      	b.n	8001a50 <HAL_RCC_OscConfig+0x106c>
 80017c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80017ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	fa93 f2a3 	rbit	r2, r3
 80017e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80017ea:	601a      	str	r2, [r3, #0]
  return result;
 80017ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80017f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f6:	fab3 f383 	clz	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	095b      	lsrs	r3, r3, #5
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b01      	cmp	r3, #1
 8001808:	d102      	bne.n	8001810 <HAL_RCC_OscConfig+0xe2c>
 800180a:	4b54      	ldr	r3, [pc, #336]	; (800195c <HAL_RCC_OscConfig+0xf78>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	e027      	b.n	8001860 <HAL_RCC_OscConfig+0xe7c>
 8001810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001814:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001818:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800181c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001822:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	fa93 f2a3 	rbit	r2, r3
 800182c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001830:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800183e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001848:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	fa93 f2a3 	rbit	r2, r3
 8001852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001856:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	4b3f      	ldr	r3, [pc, #252]	; (800195c <HAL_RCC_OscConfig+0xf78>)
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001864:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001868:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800186c:	6011      	str	r1, [r2, #0]
 800186e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001872:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	fa92 f1a2 	rbit	r1, r2
 800187c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001880:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001884:	6011      	str	r1, [r2, #0]
  return result;
 8001886:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800188a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	fab2 f282 	clz	r2, r2
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	f042 0220 	orr.w	r2, r2, #32
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	f002 021f 	and.w	r2, r2, #31
 80018a0:	2101      	movs	r1, #1
 80018a2:	fa01 f202 	lsl.w	r2, r1, r2
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d082      	beq.n	80017b2 <HAL_RCC_OscConfig+0xdce>
 80018ac:	e0cf      	b.n	8001a4e <HAL_RCC_OscConfig+0x106a>
 80018ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80018b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	fa93 f2a3 	rbit	r2, r3
 80018ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80018d2:	601a      	str	r2, [r3, #0]
  return result;
 80018d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80018dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	fab3 f383 	clz	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	461a      	mov	r2, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7fe ff64 	bl	80007c0 <HAL_GetTick>
 80018f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fc:	e009      	b.n	8001912 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fe:	f7fe ff5f 	bl	80007c0 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e09e      	b.n	8001a50 <HAL_RCC_OscConfig+0x106c>
 8001912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001916:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800191a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800191e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001924:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	fa93 f2a3 	rbit	r2, r3
 800192e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001932:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001936:	601a      	str	r2, [r3, #0]
  return result;
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001940:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001942:	fab3 f383 	clz	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	095b      	lsrs	r3, r3, #5
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b01      	cmp	r3, #1
 8001954:	d104      	bne.n	8001960 <HAL_RCC_OscConfig+0xf7c>
 8001956:	4b01      	ldr	r3, [pc, #4]	; (800195c <HAL_RCC_OscConfig+0xf78>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	e029      	b.n	80019b0 <HAL_RCC_OscConfig+0xfcc>
 800195c:	40021000 	.word	0x40021000
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001968:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800196c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001972:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fa93 f2a3 	rbit	r2, r3
 800197c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001980:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800198e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001998:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	fa93 f2a3 	rbit	r2, r3
 80019a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <HAL_RCC_OscConfig+0x1078>)
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019b4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80019b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019bc:	6011      	str	r1, [r2, #0]
 80019be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019c2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	fa92 f1a2 	rbit	r1, r2
 80019cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019d0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80019d4:	6011      	str	r1, [r2, #0]
  return result;
 80019d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019da:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	fab2 f282 	clz	r2, r2
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	f042 0220 	orr.w	r2, r2, #32
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	f002 021f 	and.w	r2, r2, #31
 80019f0:	2101      	movs	r1, #1
 80019f2:	fa01 f202 	lsl.w	r2, r1, r2
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d180      	bne.n	80018fe <HAL_RCC_OscConfig+0xf1a>
 80019fc:	e027      	b.n	8001a4e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e01e      	b.n	8001a50 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_RCC_OscConfig+0x1078>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a1e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d10b      	bne.n	8001a4a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001a32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b09e      	sub	sp, #120	; 0x78
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e162      	b.n	8001d3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a78:	4b90      	ldr	r3, [pc, #576]	; (8001cbc <HAL_RCC_ClockConfig+0x25c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d910      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b8d      	ldr	r3, [pc, #564]	; (8001cbc <HAL_RCC_ClockConfig+0x25c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 0207 	bic.w	r2, r3, #7
 8001a8e:	498b      	ldr	r1, [pc, #556]	; (8001cbc <HAL_RCC_ClockConfig+0x25c>)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b89      	ldr	r3, [pc, #548]	; (8001cbc <HAL_RCC_ClockConfig+0x25c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e14a      	b.n	8001d3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab4:	4b82      	ldr	r3, [pc, #520]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	497f      	ldr	r1, [pc, #508]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80dc 	beq.w	8001c8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d13c      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xf6>
 8001adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aec:	fab3 f383 	clz	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	095b      	lsrs	r3, r3, #5
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d102      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xa6>
 8001b00:	4b6f      	ldr	r3, [pc, #444]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	e00f      	b.n	8001b26 <HAL_RCC_ClockConfig+0xc6>
 8001b06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	667b      	str	r3, [r7, #100]	; 0x64
 8001b14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b18:	663b      	str	r3, [r7, #96]	; 0x60
 8001b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b22:	4b67      	ldr	r3, [pc, #412]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b2e:	fa92 f2a2 	rbit	r2, r2
 8001b32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001b34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b36:	fab2 f282 	clz	r2, r2
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	f042 0220 	orr.w	r2, r2, #32
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	f002 021f 	and.w	r2, r2, #31
 8001b46:	2101      	movs	r1, #1
 8001b48:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d17b      	bne.n	8001c4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e0f3      	b.n	8001d3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d13c      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0x178>
 8001b5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	095b      	lsrs	r3, r3, #5
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d102      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x128>
 8001b82:	4b4f      	ldr	r3, [pc, #316]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	e00f      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x148>
 8001b88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b90:	fa93 f3a3 	rbit	r3, r3
 8001b94:	647b      	str	r3, [r7, #68]	; 0x44
 8001b96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b9a:	643b      	str	r3, [r7, #64]	; 0x40
 8001b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ba4:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bac:	63ba      	str	r2, [r7, #56]	; 0x38
 8001bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bb0:	fa92 f2a2 	rbit	r2, r2
 8001bb4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bb8:	fab2 f282 	clz	r2, r2
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	f042 0220 	orr.w	r2, r2, #32
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	f002 021f 	and.w	r2, r2, #31
 8001bc8:	2101      	movs	r1, #1
 8001bca:	fa01 f202 	lsl.w	r2, r1, r2
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d13a      	bne.n	8001c4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0b2      	b.n	8001d3e <HAL_RCC_ClockConfig+0x2de>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	095b      	lsrs	r3, r3, #5
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d102      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x1a0>
 8001bfa:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	e00d      	b.n	8001c1c <HAL_RCC_ClockConfig+0x1bc>
 8001c00:	2302      	movs	r3, #2
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	623b      	str	r3, [r7, #32]
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	61ba      	str	r2, [r7, #24]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	fa92 f2a2 	rbit	r2, r2
 8001c26:	617a      	str	r2, [r7, #20]
  return result;
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	fab2 f282 	clz	r2, r2
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	f042 0220 	orr.w	r2, r2, #32
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	f002 021f 	and.w	r2, r2, #31
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e079      	b.n	8001d3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f023 0203 	bic.w	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	491a      	ldr	r1, [pc, #104]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c5c:	f7fe fdb0 	bl	80007c0 <HAL_GetTick>
 8001c60:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c62:	e00a      	b.n	8001c7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c64:	f7fe fdac 	bl	80007c0 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e061      	b.n	8001d3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 020c 	and.w	r2, r3, #12
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d1eb      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_RCC_ClockConfig+0x25c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d214      	bcs.n	8001cc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_RCC_ClockConfig+0x25c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 0207 	bic.w	r2, r3, #7
 8001ca2:	4906      	ldr	r1, [pc, #24]	; (8001cbc <HAL_RCC_ClockConfig+0x25c>)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <HAL_RCC_ClockConfig+0x25c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d005      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e040      	b.n	8001d3e <HAL_RCC_ClockConfig+0x2de>
 8001cbc:	40022000 	.word	0x40022000
 8001cc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCC_ClockConfig+0x2e8>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	491a      	ldr	r1, [pc, #104]	; (8001d48 <HAL_RCC_ClockConfig+0x2e8>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <HAL_RCC_ClockConfig+0x2e8>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4912      	ldr	r1, [pc, #72]	; (8001d48 <HAL_RCC_ClockConfig+0x2e8>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d02:	f000 f829 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001d06:	4601      	mov	r1, r0
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_RCC_ClockConfig+0x2e8>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d10:	22f0      	movs	r2, #240	; 0xf0
 8001d12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	fa92 f2a2 	rbit	r2, r2
 8001d1a:	60fa      	str	r2, [r7, #12]
  return result;
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	fab2 f282 	clz	r2, r2
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	40d3      	lsrs	r3, r2
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_RCC_ClockConfig+0x2ec>)
 8001d28:	5cd3      	ldrb	r3, [r2, r3]
 8001d2a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d2e:	4a08      	ldr	r2, [pc, #32]	; (8001d50 <HAL_RCC_ClockConfig+0x2f0>)
 8001d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <HAL_RCC_ClockConfig+0x2f4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fb54 	bl	80003e4 <HAL_InitTick>
  
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3778      	adds	r7, #120	; 0x78
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	080035a8 	.word	0x080035a8
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b08b      	sub	sp, #44	; 0x2c
 8001d5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001d72:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d002      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x30>
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x36>
 8001d86:	e03c      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d88:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d8a:	623b      	str	r3, [r7, #32]
      break;
 8001d8c:	e03c      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001d98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	fa92 f2a2 	rbit	r2, r2
 8001da0:	607a      	str	r2, [r7, #4]
  return result;
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	fab2 f282 	clz	r2, r2
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	40d3      	lsrs	r3, r2
 8001dac:	4a1c      	ldr	r2, [pc, #112]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001dae:	5cd3      	ldrb	r3, [r2, r3]
 8001db0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001db2:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	220f      	movs	r2, #15
 8001dbc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	fa92 f2a2 	rbit	r2, r2
 8001dc4:	60fa      	str	r2, [r7, #12]
  return result;
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	fab2 f282 	clz	r2, r2
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	40d3      	lsrs	r3, r2
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001dd2:	5cd3      	ldrb	r3, [r2, r3]
 8001dd4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001de0:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
 8001df0:	e004      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	623b      	str	r3, [r7, #32]
      break;
 8001e00:	e002      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e04:	623b      	str	r3, [r7, #32]
      break;
 8001e06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e08:	6a3b      	ldr	r3, [r7, #32]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	372c      	adds	r7, #44	; 0x2c
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	007a1200 	.word	0x007a1200
 8001e20:	080035c0 	.word	0x080035c0
 8001e24:	080035d0 	.word	0x080035d0
 8001e28:	003d0900 	.word	0x003d0900

08001e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000000 	.word	0x20000000

08001e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001e4a:	f7ff ffef 	bl	8001e2c <HAL_RCC_GetHCLKFreq>
 8001e4e:	4601      	mov	r1, r0
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001e58:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001e5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	fa92 f2a2 	rbit	r2, r2
 8001e64:	603a      	str	r2, [r7, #0]
  return result;
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	fab2 f282 	clz	r2, r2
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	40d3      	lsrs	r3, r2
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001e72:	5cd3      	ldrb	r3, [r2, r3]
 8001e74:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	080035b8 	.word	0x080035b8

08001e88 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	220f      	movs	r2, #15
 8001e96:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0203 	and.w	r2, r3, #3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	08db      	lsrs	r3, r3, #3
 8001ec2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <HAL_RCC_GetClockConfig+0x60>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0207 	and.w	r2, r3, #7
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	601a      	str	r2, [r3, #0]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40022000 	.word	0x40022000

08001eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e049      	b.n	8001f92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d106      	bne.n	8001f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f841 	bl	8001f9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3304      	adds	r3, #4
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	f000 f9e4 	bl	80022f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d001      	beq.n	8001fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e040      	b.n	800204a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <HAL_TIM_Base_Start_IT+0xa8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00e      	beq.n	8002008 <HAL_TIM_Base_Start_IT+0x58>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff2:	d009      	beq.n	8002008 <HAL_TIM_Base_Start_IT+0x58>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a18      	ldr	r2, [pc, #96]	; (800205c <HAL_TIM_Base_Start_IT+0xac>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d004      	beq.n	8002008 <HAL_TIM_Base_Start_IT+0x58>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a17      	ldr	r2, [pc, #92]	; (8002060 <HAL_TIM_Base_Start_IT+0xb0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d115      	bne.n	8002034 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <HAL_TIM_Base_Start_IT+0xb4>)
 8002010:	4013      	ands	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b06      	cmp	r3, #6
 8002018:	d015      	beq.n	8002046 <HAL_TIM_Base_Start_IT+0x96>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002020:	d011      	beq.n	8002046 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0201 	orr.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002032:	e008      	b.n	8002046 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	e000      	b.n	8002048 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002046:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40012c00 	.word	0x40012c00
 800205c:	40000400 	.word	0x40000400
 8002060:	40014000 	.word	0x40014000
 8002064:	00010007 	.word	0x00010007

08002068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b02      	cmp	r3, #2
 800207c:	d122      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b02      	cmp	r3, #2
 800208a:	d11b      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0202 	mvn.w	r2, #2
 8002094:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f905 	bl	80022ba <HAL_TIM_IC_CaptureCallback>
 80020b0:	e005      	b.n	80020be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f8f7 	bl	80022a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f908 	bl	80022ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d122      	bne.n	8002118 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d11b      	bne.n	8002118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0204 	mvn.w	r2, #4
 80020e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2202      	movs	r2, #2
 80020ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f8db 	bl	80022ba <HAL_TIM_IC_CaptureCallback>
 8002104:	e005      	b.n	8002112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f8cd 	bl	80022a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f8de 	bl	80022ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b08      	cmp	r3, #8
 8002124:	d122      	bne.n	800216c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b08      	cmp	r3, #8
 8002132:	d11b      	bne.n	800216c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0208 	mvn.w	r2, #8
 800213c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2204      	movs	r2, #4
 8002142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f8b1 	bl	80022ba <HAL_TIM_IC_CaptureCallback>
 8002158:	e005      	b.n	8002166 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f8a3 	bl	80022a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f8b4 	bl	80022ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	2b10      	cmp	r3, #16
 8002178:	d122      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	2b10      	cmp	r3, #16
 8002186:	d11b      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0210 	mvn.w	r2, #16
 8002190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2208      	movs	r2, #8
 8002196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f887 	bl	80022ba <HAL_TIM_IC_CaptureCallback>
 80021ac:	e005      	b.n	80021ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f879 	bl	80022a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f88a 	bl	80022ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d10e      	bne.n	80021ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d107      	bne.n	80021ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0201 	mvn.w	r2, #1
 80021e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7fe f8c0 	bl	800036c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f6:	2b80      	cmp	r3, #128	; 0x80
 80021f8:	d10e      	bne.n	8002218 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002204:	2b80      	cmp	r3, #128	; 0x80
 8002206:	d107      	bne.n	8002218 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f8f2 	bl	80023fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002226:	d10e      	bne.n	8002246 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002232:	2b80      	cmp	r3, #128	; 0x80
 8002234:	d107      	bne.n	8002246 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800223e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f8e5 	bl	8002410 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002250:	2b40      	cmp	r3, #64	; 0x40
 8002252:	d10e      	bne.n	8002272 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	2b40      	cmp	r3, #64	; 0x40
 8002260:	d107      	bne.n	8002272 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800226a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f838 	bl	80022e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b20      	cmp	r3, #32
 800227e:	d10e      	bne.n	800229e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	2b20      	cmp	r3, #32
 800228c:	d107      	bne.n	800229e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f06f 0220 	mvn.w	r2, #32
 8002296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f8a5 	bl	80023e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a32      	ldr	r2, [pc, #200]	; (80023d4 <TIM_Base_SetConfig+0xdc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d007      	beq.n	8002320 <TIM_Base_SetConfig+0x28>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002316:	d003      	beq.n	8002320 <TIM_Base_SetConfig+0x28>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a2f      	ldr	r2, [pc, #188]	; (80023d8 <TIM_Base_SetConfig+0xe0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d108      	bne.n	8002332 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <TIM_Base_SetConfig+0xdc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d013      	beq.n	8002362 <TIM_Base_SetConfig+0x6a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002340:	d00f      	beq.n	8002362 <TIM_Base_SetConfig+0x6a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a24      	ldr	r2, [pc, #144]	; (80023d8 <TIM_Base_SetConfig+0xe0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00b      	beq.n	8002362 <TIM_Base_SetConfig+0x6a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a23      	ldr	r2, [pc, #140]	; (80023dc <TIM_Base_SetConfig+0xe4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <TIM_Base_SetConfig+0x6a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <TIM_Base_SetConfig+0xe8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d003      	beq.n	8002362 <TIM_Base_SetConfig+0x6a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a21      	ldr	r2, [pc, #132]	; (80023e4 <TIM_Base_SetConfig+0xec>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d108      	bne.n	8002374 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a0e      	ldr	r2, [pc, #56]	; (80023d4 <TIM_Base_SetConfig+0xdc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d00b      	beq.n	80023b8 <TIM_Base_SetConfig+0xc0>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <TIM_Base_SetConfig+0xe4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d007      	beq.n	80023b8 <TIM_Base_SetConfig+0xc0>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <TIM_Base_SetConfig+0xe8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d003      	beq.n	80023b8 <TIM_Base_SetConfig+0xc0>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a0c      	ldr	r2, [pc, #48]	; (80023e4 <TIM_Base_SetConfig+0xec>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d103      	bne.n	80023c0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	615a      	str	r2, [r3, #20]
}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40012c00 	.word	0x40012c00
 80023d8:	40000400 	.word	0x40000400
 80023dc:	40014000 	.word	0x40014000
 80023e0:	40014400 	.word	0x40014400
 80023e4:	40014800 	.word	0x40014800

080023e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <UnityPrintChar>:
 *-----------------------------------------------*/

/*-----------------------------------------------*/
/* Local helper function to print characters. */
static void UnityPrintChar(const char* pch)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
    /* printable characters plus CR & LF are printed */
    if ((*pch <= 126) && (*pch >= 32))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b7e      	cmp	r3, #126	; 0x7e
 8002432:	d80a      	bhi.n	800244a <UnityPrintChar+0x26>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b1f      	cmp	r3, #31
 800243a:	d906      	bls.n	800244a <UnityPrintChar+0x26>
    {
        UNITY_OUTPUT_CHAR(*pch);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fb0b 	bl	8002a5c <putchar>
 8002446:	bf00      	nop
    {
        UNITY_OUTPUT_CHAR('\\');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
    }
}
 8002448:	e021      	b.n	800248e <UnityPrintChar+0x6a>
    else if (*pch == 13)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b0d      	cmp	r3, #13
 8002450:	d106      	bne.n	8002460 <UnityPrintChar+0x3c>
        UNITY_OUTPUT_CHAR('\\');
 8002452:	205c      	movs	r0, #92	; 0x5c
 8002454:	f000 fb02 	bl	8002a5c <putchar>
        UNITY_OUTPUT_CHAR('r');
 8002458:	2072      	movs	r0, #114	; 0x72
 800245a:	f000 faff 	bl	8002a5c <putchar>
}
 800245e:	e016      	b.n	800248e <UnityPrintChar+0x6a>
    else if (*pch == 10)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b0a      	cmp	r3, #10
 8002466:	d106      	bne.n	8002476 <UnityPrintChar+0x52>
        UNITY_OUTPUT_CHAR('\\');
 8002468:	205c      	movs	r0, #92	; 0x5c
 800246a:	f000 faf7 	bl	8002a5c <putchar>
        UNITY_OUTPUT_CHAR('n');
 800246e:	206e      	movs	r0, #110	; 0x6e
 8002470:	f000 faf4 	bl	8002a5c <putchar>
}
 8002474:	e00b      	b.n	800248e <UnityPrintChar+0x6a>
        UNITY_OUTPUT_CHAR('\\');
 8002476:	205c      	movs	r0, #92	; 0x5c
 8002478:	f000 faf0 	bl	8002a5c <putchar>
        UNITY_OUTPUT_CHAR('x');
 800247c:	2078      	movs	r0, #120	; 0x78
 800247e:	f000 faed 	bl	8002a5c <putchar>
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2102      	movs	r1, #2
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f8c9 	bl	8002620 <UnityPrintNumberHex>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <UnityPrint>:
}
#endif

/*-----------------------------------------------*/
void UnityPrint(const char* string)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
    const char* pch = string;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	60fb      	str	r3, [r7, #12]

    if (pch != NULL)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <UnityPrint+0x28>
    {
        while (*pch)
 80024a8:	e005      	b.n	80024b6 <UnityPrint+0x20>
            {
                pch += UnityPrintAnsiEscapeString(pch);
                continue;
            }
#endif
            UnityPrintChar(pch);
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f7ff ffba 	bl	8002424 <UnityPrintChar>
            pch++;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3301      	adds	r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
        while (*pch)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f5      	bne.n	80024aa <UnityPrint+0x14>
        }
    }
}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <UnityPrintNumberByStyle>:
    }
}

/*-----------------------------------------------*/
void UnityPrintNumberByStyle(const UNITY_INT number, const UNITY_DISPLAY_STYLE_T style)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	70fb      	strb	r3, [r7, #3]
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d036      	beq.n	800254a <UnityPrintNumberByStyle+0x84>
    {
        if (style == UNITY_DISPLAY_STYLE_CHAR)
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	2b91      	cmp	r3, #145	; 0x91
 80024e0:	d12f      	bne.n	8002542 <UnityPrintNumberByStyle+0x7c>
        {
            /* printable characters plus CR & LF are printed */
            UNITY_OUTPUT_CHAR('\'');
 80024e2:	2027      	movs	r0, #39	; 0x27
 80024e4:	f000 faba 	bl	8002a5c <putchar>
            if ((number <= 126) && (number >= 32))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b7e      	cmp	r3, #126	; 0x7e
 80024ec:	dc06      	bgt.n	80024fc <UnityPrintNumberByStyle+0x36>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b1f      	cmp	r3, #31
 80024f2:	dd03      	ble.n	80024fc <UnityPrintNumberByStyle+0x36>
            {
                UNITY_OUTPUT_CHAR((int)number);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fab1 	bl	8002a5c <putchar>
 80024fa:	e01e      	b.n	800253a <UnityPrintNumberByStyle+0x74>
            }
            /* write escaped carriage returns */
            else if (number == 13)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b0d      	cmp	r3, #13
 8002500:	d106      	bne.n	8002510 <UnityPrintNumberByStyle+0x4a>
            {
                UNITY_OUTPUT_CHAR('\\');
 8002502:	205c      	movs	r0, #92	; 0x5c
 8002504:	f000 faaa 	bl	8002a5c <putchar>
                UNITY_OUTPUT_CHAR('r');
 8002508:	2072      	movs	r0, #114	; 0x72
 800250a:	f000 faa7 	bl	8002a5c <putchar>
 800250e:	e014      	b.n	800253a <UnityPrintNumberByStyle+0x74>
            }
            /* write escaped line feeds */
            else if (number == 10)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b0a      	cmp	r3, #10
 8002514:	d106      	bne.n	8002524 <UnityPrintNumberByStyle+0x5e>
            {
                UNITY_OUTPUT_CHAR('\\');
 8002516:	205c      	movs	r0, #92	; 0x5c
 8002518:	f000 faa0 	bl	8002a5c <putchar>
                UNITY_OUTPUT_CHAR('n');
 800251c:	206e      	movs	r0, #110	; 0x6e
 800251e:	f000 fa9d 	bl	8002a5c <putchar>
 8002522:	e00a      	b.n	800253a <UnityPrintNumberByStyle+0x74>
            }
            /* unprintable characters are shown as codes */
            else
            {
                UNITY_OUTPUT_CHAR('\\');
 8002524:	205c      	movs	r0, #92	; 0x5c
 8002526:	f000 fa99 	bl	8002a5c <putchar>
                UNITY_OUTPUT_CHAR('x');
 800252a:	2078      	movs	r0, #120	; 0x78
 800252c:	f000 fa96 	bl	8002a5c <putchar>
                UnityPrintNumberHex((UNITY_UINT)number, 2);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2102      	movs	r1, #2
 8002534:	4618      	mov	r0, r3
 8002536:	f000 f873 	bl	8002620 <UnityPrintNumberHex>
            }
            UNITY_OUTPUT_CHAR('\'');
 800253a:	2027      	movs	r0, #39	; 0x27
 800253c:	f000 fa8e 	bl	8002a5c <putchar>
    {
        UNITY_OUTPUT_CHAR('0');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)number, (char)((style & 0xF) * 2));
    }
}
 8002540:	e01e      	b.n	8002580 <UnityPrintNumberByStyle+0xba>
            UnityPrintNumber(number);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f820 	bl	8002588 <UnityPrintNumber>
}
 8002548:	e01a      	b.n	8002580 <UnityPrintNumberByStyle+0xba>
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d004      	beq.n	800255e <UnityPrintNumberByStyle+0x98>
        UnityPrintNumberUnsigned((UNITY_UINT)number);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f82c 	bl	80025b4 <UnityPrintNumberUnsigned>
}
 800255c:	e010      	b.n	8002580 <UnityPrintNumberByStyle+0xba>
        UNITY_OUTPUT_CHAR('0');
 800255e:	2030      	movs	r0, #48	; 0x30
 8002560:	f000 fa7c 	bl	8002a5c <putchar>
        UNITY_OUTPUT_CHAR('x');
 8002564:	2078      	movs	r0, #120	; 0x78
 8002566:	f000 fa79 	bl	8002a5c <putchar>
        UnityPrintNumberHex((UNITY_UINT)number, (char)((style & 0xF) * 2));
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	b2db      	uxtb	r3, r3
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	b2db      	uxtb	r3, r3
 8002578:	4619      	mov	r1, r3
 800257a:	4610      	mov	r0, r2
 800257c:	f000 f850 	bl	8002620 <UnityPrintNumberHex>
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <UnityPrintNumber>:

/*-----------------------------------------------*/
void UnityPrintNumber(const UNITY_INT number_to_print)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
    UNITY_UINT number = (UNITY_UINT)number_to_print;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	60fb      	str	r3, [r7, #12]

    if (number_to_print < 0)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	da05      	bge.n	80025a6 <UnityPrintNumber+0x1e>
    {
        /* A negative number, including MIN negative */
        UNITY_OUTPUT_CHAR('-');
 800259a:	202d      	movs	r0, #45	; 0x2d
 800259c:	f000 fa5e 	bl	8002a5c <putchar>
        number = (~number) + 1;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	425b      	negs	r3, r3
 80025a4:	60fb      	str	r3, [r7, #12]
    }
    UnityPrintNumberUnsigned(number);
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f804 	bl	80025b4 <UnityPrintNumberUnsigned>
}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <UnityPrintNumberUnsigned>:

/*-----------------------------------------------
 * basically do an itoa using as little ram as possible */
void UnityPrintNumberUnsigned(const UNITY_UINT number)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
    UNITY_UINT divisor = 1;
 80025bc:	2301      	movs	r3, #1
 80025be:	60fb      	str	r3, [r7, #12]

    /* figure out initial divisor */
    while (number / divisor > 9)
 80025c0:	e005      	b.n	80025ce <UnityPrintNumberUnsigned+0x1a>
    {
        divisor *= 10;
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	60fb      	str	r3, [r7, #12]
    while (number / divisor > 9)
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	2b09      	cmp	r3, #9
 80025d8:	d8f3      	bhi.n	80025c2 <UnityPrintNumberUnsigned+0xe>
    }

    /* now mod and print, then divide divisor */
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	fbb2 f1f3 	udiv	r1, r2, r3
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <UnityPrintNumberUnsigned+0x68>)
 80025e4:	fba3 2301 	umull	r2, r3, r3, r1
 80025e8:	08da      	lsrs	r2, r3, #3
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	1aca      	subs	r2, r1, r3
 80025f4:	b2d3      	uxtb	r3, r2
 80025f6:	3330      	adds	r3, #48	; 0x30
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fa2e 	bl	8002a5c <putchar>
        divisor /= 10;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4a06      	ldr	r2, [pc, #24]	; (800261c <UnityPrintNumberUnsigned+0x68>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	08db      	lsrs	r3, r3, #3
 800260a:	60fb      	str	r3, [r7, #12]
    } while (divisor > 0);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1e3      	bne.n	80025da <UnityPrintNumberUnsigned+0x26>
}
 8002612:	bf00      	nop
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	cccccccd 	.word	0xcccccccd

08002620 <UnityPrintNumberHex>:

/*-----------------------------------------------*/
void UnityPrintNumberHex(const UNITY_UINT number, const char nibbles_to_print)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	70fb      	strb	r3, [r7, #3]
    int nibble;
    char nibbles = nibbles_to_print;
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	73fb      	strb	r3, [r7, #15]

    if ((unsigned)nibbles > UNITY_MAX_NIBBLES)
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	2b08      	cmp	r3, #8
 8002634:	d91f      	bls.n	8002676 <UnityPrintNumberHex+0x56>
    {
        nibbles = UNITY_MAX_NIBBLES;
 8002636:	2308      	movs	r3, #8
 8002638:	73fb      	strb	r3, [r7, #15]
    }

    while (nibbles > 0)
 800263a:	e01c      	b.n	8002676 <UnityPrintNumberHex+0x56>
    {
        nibbles--;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	3b01      	subs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
        nibble = (int)(number >> (nibbles * 4)) & 0x0F;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	60bb      	str	r3, [r7, #8]
        if (nibble <= 9)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b09      	cmp	r3, #9
 8002656:	dc07      	bgt.n	8002668 <UnityPrintNumberHex+0x48>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	3330      	adds	r3, #48	; 0x30
 800265e:	b2db      	uxtb	r3, r3
 8002660:	4618      	mov	r0, r3
 8002662:	f000 f9fb 	bl	8002a5c <putchar>
 8002666:	e006      	b.n	8002676 <UnityPrintNumberHex+0x56>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	3337      	adds	r3, #55	; 0x37
 800266e:	b2db      	uxtb	r3, r3
 8002670:	4618      	mov	r0, r3
 8002672:	f000 f9f3 	bl	8002a5c <putchar>
    while (nibbles > 0)
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1df      	bne.n	800263c <UnityPrintNumberHex+0x1c>
        }
    }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <UnityTestResultsBegin>:
}
#endif /* ! UNITY_EXCLUDE_FLOAT_PRINT */

/*-----------------------------------------------*/
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
    UnityPrintNumber((UNITY_INT)line);
    UNITY_OUTPUT_CHAR(' ');
    UnityPrint(Unity.CurrentTestName);
    UNITY_OUTPUT_CHAR(':');
#else
    UnityPrint(file);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff feff 	bl	8002496 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 8002698:	203a      	movs	r0, #58	; 0x3a
 800269a:	f000 f9df 	bl	8002a5c <putchar>
    UnityPrintNumber((UNITY_INT)line);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff71 	bl	8002588 <UnityPrintNumber>
    UNITY_OUTPUT_CHAR(':');
 80026a6:	203a      	movs	r0, #58	; 0x3a
 80026a8:	f000 f9d8 	bl	8002a5c <putchar>
    UnityPrint(Unity.CurrentTestName);
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <UnityTestResultsBegin+0x3c>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fef0 	bl	8002496 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 80026b6:	203a      	movs	r0, #58	; 0x3a
 80026b8:	f000 f9d0 	bl	8002a5c <putchar>
#endif
#endif
#endif
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	200000e0 	.word	0x200000e0

080026c8 <UnityTestResultsFailBegin>:

/*-----------------------------------------------*/
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
    UnityTestResultsBegin(Unity.TestFile, line);
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <UnityTestResultsFailBegin+0x28>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ffd6 	bl	8002688 <UnityTestResultsBegin>
    UnityPrint(UnityStrFail);
 80026dc:	4805      	ldr	r0, [pc, #20]	; (80026f4 <UnityTestResultsFailBegin+0x2c>)
 80026de:	f7ff feda 	bl	8002496 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 80026e2:	203a      	movs	r0, #58	; 0x3a
 80026e4:	f000 f9ba 	bl	8002a5c <putchar>
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	200000e0 	.word	0x200000e0
 80026f4:	080035ec 	.word	0x080035ec

080026f8 <UnityConcludeTest>:

/*-----------------------------------------------*/
void UnityConcludeTest(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
    if (Unity.CurrentTestIgnored)
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <UnityConcludeTest+0x58>)
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <UnityConcludeTest+0x18>
    {
        Unity.TestIgnores++;
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <UnityConcludeTest+0x58>)
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	3301      	adds	r3, #1
 800270a:	4a11      	ldr	r2, [pc, #68]	; (8002750 <UnityConcludeTest+0x58>)
 800270c:	61d3      	str	r3, [r2, #28]
 800270e:	e014      	b.n	800273a <UnityConcludeTest+0x42>
    }
    else if (!Unity.CurrentTestFailed)
 8002710:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <UnityConcludeTest+0x58>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10b      	bne.n	8002730 <UnityConcludeTest+0x38>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
 8002718:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <UnityConcludeTest+0x58>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0c      	ldr	r2, [pc, #48]	; (8002750 <UnityConcludeTest+0x58>)
 800271e:	6912      	ldr	r2, [r2, #16]
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ffb0 	bl	8002688 <UnityTestResultsBegin>
        UnityPrint(UnityStrPass);
 8002728:	480a      	ldr	r0, [pc, #40]	; (8002754 <UnityConcludeTest+0x5c>)
 800272a:	f7ff feb4 	bl	8002496 <UnityPrint>
 800272e:	e004      	b.n	800273a <UnityConcludeTest+0x42>
    }
    else
    {
        Unity.TestFailures++;
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <UnityConcludeTest+0x58>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	3301      	adds	r3, #1
 8002736:	4a06      	ldr	r2, [pc, #24]	; (8002750 <UnityConcludeTest+0x58>)
 8002738:	6193      	str	r3, [r2, #24]
    }

    Unity.CurrentTestFailed = 0;
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <UnityConcludeTest+0x58>)
 800273c:	2200      	movs	r2, #0
 800273e:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <UnityConcludeTest+0x58>)
 8002742:	2200      	movs	r2, #0
 8002744:	625a      	str	r2, [r3, #36]	; 0x24
    UNITY_PRINT_EXEC_TIME();
    UNITY_PRINT_EOL();
 8002746:	200a      	movs	r0, #10
 8002748:	f000 f988 	bl	8002a5c <putchar>
    UNITY_FLUSH_CALL();
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}
 8002750:	200000e0 	.word	0x200000e0
 8002754:	080035e4 	.word	0x080035e4

08002758 <UnityAddMsgIfSpecified>:

/*-----------------------------------------------*/
static void UnityAddMsgIfSpecified(const char* msg)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
#ifdef UNITY_PRINT_TEST_CONTEXT
    UnityPrint(UnityStrSpacer);
    UNITY_PRINT_TEST_CONTEXT();
#endif
#ifndef UNITY_EXCLUDE_DETAILS
    if (Unity.CurrentDetail1)
 8002760:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <UnityAddMsgIfSpecified+0x58>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d016      	beq.n	8002796 <UnityAddMsgIfSpecified+0x3e>
    {
        UnityPrint(UnityStrSpacer);
 8002768:	4812      	ldr	r0, [pc, #72]	; (80027b4 <UnityAddMsgIfSpecified+0x5c>)
 800276a:	f7ff fe94 	bl	8002496 <UnityPrint>
        UnityPrint(UnityStrDetail1Name);
 800276e:	4812      	ldr	r0, [pc, #72]	; (80027b8 <UnityAddMsgIfSpecified+0x60>)
 8002770:	f7ff fe91 	bl	8002496 <UnityPrint>
        UnityPrint(Unity.CurrentDetail1);
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <UnityAddMsgIfSpecified+0x58>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fe8c 	bl	8002496 <UnityPrint>
        if (Unity.CurrentDetail2)
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <UnityAddMsgIfSpecified+0x58>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <UnityAddMsgIfSpecified+0x3e>
        {
            UnityPrint(UnityStrDetail2Name);
 8002786:	480d      	ldr	r0, [pc, #52]	; (80027bc <UnityAddMsgIfSpecified+0x64>)
 8002788:	f7ff fe85 	bl	8002496 <UnityPrint>
            UnityPrint(Unity.CurrentDetail2);
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <UnityAddMsgIfSpecified+0x58>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fe80 	bl	8002496 <UnityPrint>
        }
    }
#endif
    if (msg)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <UnityAddMsgIfSpecified+0x50>
    {
        UnityPrint(UnityStrSpacer);
 800279c:	4805      	ldr	r0, [pc, #20]	; (80027b4 <UnityAddMsgIfSpecified+0x5c>)
 800279e:	f7ff fe7a 	bl	8002496 <UnityPrint>
        UnityPrint(msg);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff fe77 	bl	8002496 <UnityPrint>
    }
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	200000e0 	.word	0x200000e0
 80027b4:	080035f4 	.word	0x080035f4
 80027b8:	08003674 	.word	0x08003674
 80027bc:	08003680 	.word	0x08003680

080027c0 <UnityAssertEqualNumber>:
void UnityAssertEqualNumber(const UNITY_INT expected,
                            const UNITY_INT actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber,
                            const UNITY_DISPLAY_STYLE_T style)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
    RETURN_IF_FAIL_OR_IGNORE;
 80027ce:	4b18      	ldr	r3, [pc, #96]	; (8002830 <UnityAssertEqualNumber+0x70>)
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d103      	bne.n	80027de <UnityAssertEqualNumber+0x1e>
 80027d6:	4b16      	ldr	r3, [pc, #88]	; (8002830 <UnityAssertEqualNumber+0x70>)
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <UnityAssertEqualNumber+0x26>
 80027de:	2101      	movs	r1, #1
 80027e0:	4814      	ldr	r0, [pc, #80]	; (8002834 <UnityAssertEqualNumber+0x74>)
 80027e2:	f7fd fcf7 	bl	80001d4 <longjmp>

    if (expected != actual)
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d01c      	beq.n	8002828 <UnityAssertEqualNumber+0x68>
    {
        UnityTestResultsFailBegin(lineNumber);
 80027ee:	6838      	ldr	r0, [r7, #0]
 80027f0:	f7ff ff6a 	bl	80026c8 <UnityTestResultsFailBegin>
        UnityPrint(UnityStrExpected);
 80027f4:	4810      	ldr	r0, [pc, #64]	; (8002838 <UnityAssertEqualNumber+0x78>)
 80027f6:	f7ff fe4e 	bl	8002496 <UnityPrint>
        UnityPrintNumberByStyle(expected, style);
 80027fa:	7e3b      	ldrb	r3, [r7, #24]
 80027fc:	4619      	mov	r1, r3
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f7ff fe61 	bl	80024c6 <UnityPrintNumberByStyle>
        UnityPrint(UnityStrWas);
 8002804:	480d      	ldr	r0, [pc, #52]	; (800283c <UnityAssertEqualNumber+0x7c>)
 8002806:	f7ff fe46 	bl	8002496 <UnityPrint>
        UnityPrintNumberByStyle(actual, style);
 800280a:	7e3b      	ldrb	r3, [r7, #24]
 800280c:	4619      	mov	r1, r3
 800280e:	68b8      	ldr	r0, [r7, #8]
 8002810:	f7ff fe59 	bl	80024c6 <UnityPrintNumberByStyle>
        UnityAddMsgIfSpecified(msg);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ff9f 	bl	8002758 <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <UnityAssertEqualNumber+0x70>)
 800281c:	2201      	movs	r2, #1
 800281e:	621a      	str	r2, [r3, #32]
 8002820:	2101      	movs	r1, #1
 8002822:	4804      	ldr	r0, [pc, #16]	; (8002834 <UnityAssertEqualNumber+0x74>)
 8002824:	f7fd fcd6 	bl	80001d4 <longjmp>
    }
}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200000e0 	.word	0x200000e0
 8002834:	20000108 	.word	0x20000108
 8002838:	080035f8 	.word	0x080035f8
 800283c:	08003604 	.word	0x08003604

08002840 <UnityMessage>:
    UNITY_IGNORE_AND_BAIL;
}

/*-----------------------------------------------*/
void UnityMessage(const char* msg, const UNITY_LINE_TYPE line)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
    UnityTestResultsBegin(Unity.TestFile, line);
 800284a:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <UnityMessage+0x44>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6839      	ldr	r1, [r7, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff19 	bl	8002688 <UnityTestResultsBegin>
    UnityPrint("INFO");
 8002856:	480c      	ldr	r0, [pc, #48]	; (8002888 <UnityMessage+0x48>)
 8002858:	f7ff fe1d 	bl	8002496 <UnityPrint>
    if (msg != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <UnityMessage+0x34>
    {
      UNITY_OUTPUT_CHAR(':');
 8002862:	203a      	movs	r0, #58	; 0x3a
 8002864:	f000 f8fa 	bl	8002a5c <putchar>
      UNITY_OUTPUT_CHAR(' ');
 8002868:	2020      	movs	r0, #32
 800286a:	f000 f8f7 	bl	8002a5c <putchar>
      UnityPrint(msg);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fe11 	bl	8002496 <UnityPrint>
    }
    UNITY_PRINT_EOL();
 8002874:	200a      	movs	r0, #10
 8002876:	f000 f8f1 	bl	8002a5c <putchar>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200000e0 	.word	0x200000e0
 8002888:	080035a0 	.word	0x080035a0

0800288c <UnityDefaultTestRun>:

/*-----------------------------------------------*/
/* If we have not defined our own test runner, then include our default test runner to make life easier */
#ifndef UNITY_SKIP_DEFAULT_RUNNER
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
    Unity.CurrentTestName = FuncName;
 8002898:	4a14      	ldr	r2, [pc, #80]	; (80028ec <UnityDefaultTestRun+0x60>)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	6053      	str	r3, [r2, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a12      	ldr	r2, [pc, #72]	; (80028ec <UnityDefaultTestRun+0x60>)
 80028a2:	6113      	str	r3, [r2, #16]
    Unity.NumberOfTests++;
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <UnityDefaultTestRun+0x60>)
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	3301      	adds	r3, #1
 80028aa:	4a10      	ldr	r2, [pc, #64]	; (80028ec <UnityDefaultTestRun+0x60>)
 80028ac:	6153      	str	r3, [r2, #20]
    UNITY_CLR_DETAILS();
 80028ae:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <UnityDefaultTestRun+0x60>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <UnityDefaultTestRun+0x60>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	60da      	str	r2, [r3, #12]
    UNITY_EXEC_TIME_START();
    if (TEST_PROTECT())
 80028ba:	480d      	ldr	r0, [pc, #52]	; (80028f0 <UnityDefaultTestRun+0x64>)
 80028bc:	f7fd fc84 	bl	80001c8 <setjmp>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d103      	bne.n	80028ce <UnityDefaultTestRun+0x42>
    {
        setUp();
 80028c6:	f7fd ff21 	bl	800070c <setUp>
        Func();
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4798      	blx	r3
    }
    if (TEST_PROTECT())
 80028ce:	4808      	ldr	r0, [pc, #32]	; (80028f0 <UnityDefaultTestRun+0x64>)
 80028d0:	f7fd fc7a 	bl	80001c8 <setjmp>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <UnityDefaultTestRun+0x52>
    {
        tearDown();
 80028da:	f7fd ff27 	bl	800072c <tearDown>
    }
    UNITY_EXEC_TIME_STOP();
    UnityConcludeTest();
 80028de:	f7ff ff0b 	bl	80026f8 <UnityConcludeTest>
}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200000e0 	.word	0x200000e0
 80028f0:	20000108 	.word	0x20000108

080028f4 <UnityBegin>:
    Unity.TestFile = filename;
}

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
    Unity.TestFile = filename;
 80028fc:	4a11      	ldr	r2, [pc, #68]	; (8002944 <UnityBegin+0x50>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6013      	str	r3, [r2, #0]
    Unity.CurrentTestName = NULL;
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <UnityBegin+0x50>)
 8002904:	2200      	movs	r2, #0
 8002906:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
 8002908:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <UnityBegin+0x50>)
 800290a:	2200      	movs	r2, #0
 800290c:	611a      	str	r2, [r3, #16]
    Unity.NumberOfTests = 0;
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <UnityBegin+0x50>)
 8002910:	2200      	movs	r2, #0
 8002912:	615a      	str	r2, [r3, #20]
    Unity.TestFailures = 0;
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <UnityBegin+0x50>)
 8002916:	2200      	movs	r2, #0
 8002918:	619a      	str	r2, [r3, #24]
    Unity.TestIgnores = 0;
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <UnityBegin+0x50>)
 800291c:	2200      	movs	r2, #0
 800291e:	61da      	str	r2, [r3, #28]
    Unity.CurrentTestFailed = 0;
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <UnityBegin+0x50>)
 8002922:	2200      	movs	r2, #0
 8002924:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <UnityBegin+0x50>)
 8002928:	2200      	movs	r2, #0
 800292a:	625a      	str	r2, [r3, #36]	; 0x24

    UNITY_CLR_DETAILS();
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <UnityBegin+0x50>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	4b04      	ldr	r3, [pc, #16]	; (8002944 <UnityBegin+0x50>)
 8002934:	2200      	movs	r2, #0
 8002936:	60da      	str	r2, [r3, #12]
    UNITY_OUTPUT_START();
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	200000e0 	.word	0x200000e0

08002948 <UnityEnd>:

/*-----------------------------------------------*/
int UnityEnd(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
    UNITY_PRINT_EOL();
 800294c:	200a      	movs	r0, #10
 800294e:	f000 f885 	bl	8002a5c <putchar>
    UnityPrint(UnityStrBreaker);
 8002952:	4819      	ldr	r0, [pc, #100]	; (80029b8 <UnityEnd+0x70>)
 8002954:	f7ff fd9f 	bl	8002496 <UnityPrint>
    UNITY_PRINT_EOL();
 8002958:	200a      	movs	r0, #10
 800295a:	f000 f87f 	bl	8002a5c <putchar>
    UnityPrintNumber((UNITY_INT)(Unity.NumberOfTests));
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <UnityEnd+0x74>)
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fe10 	bl	8002588 <UnityPrintNumber>
    UnityPrint(UnityStrResultsTests);
 8002968:	4815      	ldr	r0, [pc, #84]	; (80029c0 <UnityEnd+0x78>)
 800296a:	f7ff fd94 	bl	8002496 <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestFailures));
 800296e:	4b13      	ldr	r3, [pc, #76]	; (80029bc <UnityEnd+0x74>)
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fe08 	bl	8002588 <UnityPrintNumber>
    UnityPrint(UnityStrResultsFailures);
 8002978:	4812      	ldr	r0, [pc, #72]	; (80029c4 <UnityEnd+0x7c>)
 800297a:	f7ff fd8c 	bl	8002496 <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestIgnores));
 800297e:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <UnityEnd+0x74>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fe00 	bl	8002588 <UnityPrintNumber>
    UnityPrint(UnityStrResultsIgnored);
 8002988:	480f      	ldr	r0, [pc, #60]	; (80029c8 <UnityEnd+0x80>)
 800298a:	f7ff fd84 	bl	8002496 <UnityPrint>
    UNITY_PRINT_EOL();
 800298e:	200a      	movs	r0, #10
 8002990:	f000 f864 	bl	8002a5c <putchar>
    if (Unity.TestFailures == 0U)
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <UnityEnd+0x74>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d103      	bne.n	80029a4 <UnityEnd+0x5c>
    {
        UnityPrint(UnityStrOk);
 800299c:	480b      	ldr	r0, [pc, #44]	; (80029cc <UnityEnd+0x84>)
 800299e:	f7ff fd7a 	bl	8002496 <UnityPrint>
 80029a2:	e002      	b.n	80029aa <UnityEnd+0x62>
    }
    else
    {
        UnityPrint(UnityStrFail);
 80029a4:	480a      	ldr	r0, [pc, #40]	; (80029d0 <UnityEnd+0x88>)
 80029a6:	f7ff fd76 	bl	8002496 <UnityPrint>
#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
        UNITY_OUTPUT_CHAR('E'); UNITY_OUTPUT_CHAR('D');
#endif
    }
    UNITY_PRINT_EOL();
 80029aa:	200a      	movs	r0, #10
 80029ac:	f000 f856 	bl	8002a5c <putchar>
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
 80029b0:	4b02      	ldr	r3, [pc, #8]	; (80029bc <UnityEnd+0x74>)
 80029b2:	699b      	ldr	r3, [r3, #24]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	0800363c 	.word	0x0800363c
 80029bc:	200000e0 	.word	0x200000e0
 80029c0:	08003654 	.word	0x08003654
 80029c4:	0800365c 	.word	0x0800365c
 80029c8:	08003668 	.word	0x08003668
 80029cc:	080035e0 	.word	0x080035e0
 80029d0:	080035ec 	.word	0x080035ec

080029d4 <add>:
 *  Created on: 2023/06/11
 *      Author: dev_server
 */
#include "calc.h"

int add(int a,int b){
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
	int c = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
	c=a+b;
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
	return(c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <__errno>:
 80029f8:	4b01      	ldr	r3, [pc, #4]	; (8002a00 <__errno+0x8>)
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	2000000c 	.word	0x2000000c

08002a04 <__libc_init_array>:
 8002a04:	b570      	push	{r4, r5, r6, lr}
 8002a06:	4d0d      	ldr	r5, [pc, #52]	; (8002a3c <__libc_init_array+0x38>)
 8002a08:	4c0d      	ldr	r4, [pc, #52]	; (8002a40 <__libc_init_array+0x3c>)
 8002a0a:	1b64      	subs	r4, r4, r5
 8002a0c:	10a4      	asrs	r4, r4, #2
 8002a0e:	2600      	movs	r6, #0
 8002a10:	42a6      	cmp	r6, r4
 8002a12:	d109      	bne.n	8002a28 <__libc_init_array+0x24>
 8002a14:	4d0b      	ldr	r5, [pc, #44]	; (8002a44 <__libc_init_array+0x40>)
 8002a16:	4c0c      	ldr	r4, [pc, #48]	; (8002a48 <__libc_init_array+0x44>)
 8002a18:	f000 fd7c 	bl	8003514 <_init>
 8002a1c:	1b64      	subs	r4, r4, r5
 8002a1e:	10a4      	asrs	r4, r4, #2
 8002a20:	2600      	movs	r6, #0
 8002a22:	42a6      	cmp	r6, r4
 8002a24:	d105      	bne.n	8002a32 <__libc_init_array+0x2e>
 8002a26:	bd70      	pop	{r4, r5, r6, pc}
 8002a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a2c:	4798      	blx	r3
 8002a2e:	3601      	adds	r6, #1
 8002a30:	e7ee      	b.n	8002a10 <__libc_init_array+0xc>
 8002a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a36:	4798      	blx	r3
 8002a38:	3601      	adds	r6, #1
 8002a3a:	e7f2      	b.n	8002a22 <__libc_init_array+0x1e>
 8002a3c:	080036f0 	.word	0x080036f0
 8002a40:	080036f0 	.word	0x080036f0
 8002a44:	080036f0 	.word	0x080036f0
 8002a48:	080036f4 	.word	0x080036f4

08002a4c <memset>:
 8002a4c:	4402      	add	r2, r0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d100      	bne.n	8002a56 <memset+0xa>
 8002a54:	4770      	bx	lr
 8002a56:	f803 1b01 	strb.w	r1, [r3], #1
 8002a5a:	e7f9      	b.n	8002a50 <memset+0x4>

08002a5c <putchar>:
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <putchar+0x28>)
 8002a5e:	b513      	push	{r0, r1, r4, lr}
 8002a60:	681c      	ldr	r4, [r3, #0]
 8002a62:	4601      	mov	r1, r0
 8002a64:	b134      	cbz	r4, 8002a74 <putchar+0x18>
 8002a66:	69a3      	ldr	r3, [r4, #24]
 8002a68:	b923      	cbnz	r3, 8002a74 <putchar+0x18>
 8002a6a:	9001      	str	r0, [sp, #4]
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f000 fa5b 	bl	8002f28 <__sinit>
 8002a72:	9901      	ldr	r1, [sp, #4]
 8002a74:	68a2      	ldr	r2, [r4, #8]
 8002a76:	4620      	mov	r0, r4
 8002a78:	b002      	add	sp, #8
 8002a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a7e:	f000 bc39 	b.w	80032f4 <_putc_r>
 8002a82:	bf00      	nop
 8002a84:	2000000c 	.word	0x2000000c

08002a88 <_puts_r>:
 8002a88:	b570      	push	{r4, r5, r6, lr}
 8002a8a:	460e      	mov	r6, r1
 8002a8c:	4605      	mov	r5, r0
 8002a8e:	b118      	cbz	r0, 8002a98 <_puts_r+0x10>
 8002a90:	6983      	ldr	r3, [r0, #24]
 8002a92:	b90b      	cbnz	r3, 8002a98 <_puts_r+0x10>
 8002a94:	f000 fa48 	bl	8002f28 <__sinit>
 8002a98:	69ab      	ldr	r3, [r5, #24]
 8002a9a:	68ac      	ldr	r4, [r5, #8]
 8002a9c:	b913      	cbnz	r3, 8002aa4 <_puts_r+0x1c>
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	f000 fa42 	bl	8002f28 <__sinit>
 8002aa4:	4b2c      	ldr	r3, [pc, #176]	; (8002b58 <_puts_r+0xd0>)
 8002aa6:	429c      	cmp	r4, r3
 8002aa8:	d120      	bne.n	8002aec <_puts_r+0x64>
 8002aaa:	686c      	ldr	r4, [r5, #4]
 8002aac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002aae:	07db      	lsls	r3, r3, #31
 8002ab0:	d405      	bmi.n	8002abe <_puts_r+0x36>
 8002ab2:	89a3      	ldrh	r3, [r4, #12]
 8002ab4:	0598      	lsls	r0, r3, #22
 8002ab6:	d402      	bmi.n	8002abe <_puts_r+0x36>
 8002ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aba:	f000 fad3 	bl	8003064 <__retarget_lock_acquire_recursive>
 8002abe:	89a3      	ldrh	r3, [r4, #12]
 8002ac0:	0719      	lsls	r1, r3, #28
 8002ac2:	d51d      	bpl.n	8002b00 <_puts_r+0x78>
 8002ac4:	6923      	ldr	r3, [r4, #16]
 8002ac6:	b1db      	cbz	r3, 8002b00 <_puts_r+0x78>
 8002ac8:	3e01      	subs	r6, #1
 8002aca:	68a3      	ldr	r3, [r4, #8]
 8002acc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	60a3      	str	r3, [r4, #8]
 8002ad4:	bb39      	cbnz	r1, 8002b26 <_puts_r+0x9e>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	da38      	bge.n	8002b4c <_puts_r+0xc4>
 8002ada:	4622      	mov	r2, r4
 8002adc:	210a      	movs	r1, #10
 8002ade:	4628      	mov	r0, r5
 8002ae0:	f000 f848 	bl	8002b74 <__swbuf_r>
 8002ae4:	3001      	adds	r0, #1
 8002ae6:	d011      	beq.n	8002b0c <_puts_r+0x84>
 8002ae8:	250a      	movs	r5, #10
 8002aea:	e011      	b.n	8002b10 <_puts_r+0x88>
 8002aec:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <_puts_r+0xd4>)
 8002aee:	429c      	cmp	r4, r3
 8002af0:	d101      	bne.n	8002af6 <_puts_r+0x6e>
 8002af2:	68ac      	ldr	r4, [r5, #8]
 8002af4:	e7da      	b.n	8002aac <_puts_r+0x24>
 8002af6:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <_puts_r+0xd8>)
 8002af8:	429c      	cmp	r4, r3
 8002afa:	bf08      	it	eq
 8002afc:	68ec      	ldreq	r4, [r5, #12]
 8002afe:	e7d5      	b.n	8002aac <_puts_r+0x24>
 8002b00:	4621      	mov	r1, r4
 8002b02:	4628      	mov	r0, r5
 8002b04:	f000 f888 	bl	8002c18 <__swsetup_r>
 8002b08:	2800      	cmp	r0, #0
 8002b0a:	d0dd      	beq.n	8002ac8 <_puts_r+0x40>
 8002b0c:	f04f 35ff 	mov.w	r5, #4294967295
 8002b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b12:	07da      	lsls	r2, r3, #31
 8002b14:	d405      	bmi.n	8002b22 <_puts_r+0x9a>
 8002b16:	89a3      	ldrh	r3, [r4, #12]
 8002b18:	059b      	lsls	r3, r3, #22
 8002b1a:	d402      	bmi.n	8002b22 <_puts_r+0x9a>
 8002b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b1e:	f000 faa2 	bl	8003066 <__retarget_lock_release_recursive>
 8002b22:	4628      	mov	r0, r5
 8002b24:	bd70      	pop	{r4, r5, r6, pc}
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	da04      	bge.n	8002b34 <_puts_r+0xac>
 8002b2a:	69a2      	ldr	r2, [r4, #24]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	dc06      	bgt.n	8002b3e <_puts_r+0xb6>
 8002b30:	290a      	cmp	r1, #10
 8002b32:	d004      	beq.n	8002b3e <_puts_r+0xb6>
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	6022      	str	r2, [r4, #0]
 8002b3a:	7019      	strb	r1, [r3, #0]
 8002b3c:	e7c5      	b.n	8002aca <_puts_r+0x42>
 8002b3e:	4622      	mov	r2, r4
 8002b40:	4628      	mov	r0, r5
 8002b42:	f000 f817 	bl	8002b74 <__swbuf_r>
 8002b46:	3001      	adds	r0, #1
 8002b48:	d1bf      	bne.n	8002aca <_puts_r+0x42>
 8002b4a:	e7df      	b.n	8002b0c <_puts_r+0x84>
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	250a      	movs	r5, #10
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	6022      	str	r2, [r4, #0]
 8002b54:	701d      	strb	r5, [r3, #0]
 8002b56:	e7db      	b.n	8002b10 <_puts_r+0x88>
 8002b58:	080036b0 	.word	0x080036b0
 8002b5c:	080036d0 	.word	0x080036d0
 8002b60:	08003690 	.word	0x08003690

08002b64 <puts>:
 8002b64:	4b02      	ldr	r3, [pc, #8]	; (8002b70 <puts+0xc>)
 8002b66:	4601      	mov	r1, r0
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	f7ff bf8d 	b.w	8002a88 <_puts_r>
 8002b6e:	bf00      	nop
 8002b70:	2000000c 	.word	0x2000000c

08002b74 <__swbuf_r>:
 8002b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b76:	460e      	mov	r6, r1
 8002b78:	4614      	mov	r4, r2
 8002b7a:	4605      	mov	r5, r0
 8002b7c:	b118      	cbz	r0, 8002b86 <__swbuf_r+0x12>
 8002b7e:	6983      	ldr	r3, [r0, #24]
 8002b80:	b90b      	cbnz	r3, 8002b86 <__swbuf_r+0x12>
 8002b82:	f000 f9d1 	bl	8002f28 <__sinit>
 8002b86:	4b21      	ldr	r3, [pc, #132]	; (8002c0c <__swbuf_r+0x98>)
 8002b88:	429c      	cmp	r4, r3
 8002b8a:	d12b      	bne.n	8002be4 <__swbuf_r+0x70>
 8002b8c:	686c      	ldr	r4, [r5, #4]
 8002b8e:	69a3      	ldr	r3, [r4, #24]
 8002b90:	60a3      	str	r3, [r4, #8]
 8002b92:	89a3      	ldrh	r3, [r4, #12]
 8002b94:	071a      	lsls	r2, r3, #28
 8002b96:	d52f      	bpl.n	8002bf8 <__swbuf_r+0x84>
 8002b98:	6923      	ldr	r3, [r4, #16]
 8002b9a:	b36b      	cbz	r3, 8002bf8 <__swbuf_r+0x84>
 8002b9c:	6923      	ldr	r3, [r4, #16]
 8002b9e:	6820      	ldr	r0, [r4, #0]
 8002ba0:	1ac0      	subs	r0, r0, r3
 8002ba2:	6963      	ldr	r3, [r4, #20]
 8002ba4:	b2f6      	uxtb	r6, r6
 8002ba6:	4283      	cmp	r3, r0
 8002ba8:	4637      	mov	r7, r6
 8002baa:	dc04      	bgt.n	8002bb6 <__swbuf_r+0x42>
 8002bac:	4621      	mov	r1, r4
 8002bae:	4628      	mov	r0, r5
 8002bb0:	f000 f926 	bl	8002e00 <_fflush_r>
 8002bb4:	bb30      	cbnz	r0, 8002c04 <__swbuf_r+0x90>
 8002bb6:	68a3      	ldr	r3, [r4, #8]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	60a3      	str	r3, [r4, #8]
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	6022      	str	r2, [r4, #0]
 8002bc2:	701e      	strb	r6, [r3, #0]
 8002bc4:	6963      	ldr	r3, [r4, #20]
 8002bc6:	3001      	adds	r0, #1
 8002bc8:	4283      	cmp	r3, r0
 8002bca:	d004      	beq.n	8002bd6 <__swbuf_r+0x62>
 8002bcc:	89a3      	ldrh	r3, [r4, #12]
 8002bce:	07db      	lsls	r3, r3, #31
 8002bd0:	d506      	bpl.n	8002be0 <__swbuf_r+0x6c>
 8002bd2:	2e0a      	cmp	r6, #10
 8002bd4:	d104      	bne.n	8002be0 <__swbuf_r+0x6c>
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	4628      	mov	r0, r5
 8002bda:	f000 f911 	bl	8002e00 <_fflush_r>
 8002bde:	b988      	cbnz	r0, 8002c04 <__swbuf_r+0x90>
 8002be0:	4638      	mov	r0, r7
 8002be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002be4:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <__swbuf_r+0x9c>)
 8002be6:	429c      	cmp	r4, r3
 8002be8:	d101      	bne.n	8002bee <__swbuf_r+0x7a>
 8002bea:	68ac      	ldr	r4, [r5, #8]
 8002bec:	e7cf      	b.n	8002b8e <__swbuf_r+0x1a>
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <__swbuf_r+0xa0>)
 8002bf0:	429c      	cmp	r4, r3
 8002bf2:	bf08      	it	eq
 8002bf4:	68ec      	ldreq	r4, [r5, #12]
 8002bf6:	e7ca      	b.n	8002b8e <__swbuf_r+0x1a>
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	4628      	mov	r0, r5
 8002bfc:	f000 f80c 	bl	8002c18 <__swsetup_r>
 8002c00:	2800      	cmp	r0, #0
 8002c02:	d0cb      	beq.n	8002b9c <__swbuf_r+0x28>
 8002c04:	f04f 37ff 	mov.w	r7, #4294967295
 8002c08:	e7ea      	b.n	8002be0 <__swbuf_r+0x6c>
 8002c0a:	bf00      	nop
 8002c0c:	080036b0 	.word	0x080036b0
 8002c10:	080036d0 	.word	0x080036d0
 8002c14:	08003690 	.word	0x08003690

08002c18 <__swsetup_r>:
 8002c18:	4b32      	ldr	r3, [pc, #200]	; (8002ce4 <__swsetup_r+0xcc>)
 8002c1a:	b570      	push	{r4, r5, r6, lr}
 8002c1c:	681d      	ldr	r5, [r3, #0]
 8002c1e:	4606      	mov	r6, r0
 8002c20:	460c      	mov	r4, r1
 8002c22:	b125      	cbz	r5, 8002c2e <__swsetup_r+0x16>
 8002c24:	69ab      	ldr	r3, [r5, #24]
 8002c26:	b913      	cbnz	r3, 8002c2e <__swsetup_r+0x16>
 8002c28:	4628      	mov	r0, r5
 8002c2a:	f000 f97d 	bl	8002f28 <__sinit>
 8002c2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ce8 <__swsetup_r+0xd0>)
 8002c30:	429c      	cmp	r4, r3
 8002c32:	d10f      	bne.n	8002c54 <__swsetup_r+0x3c>
 8002c34:	686c      	ldr	r4, [r5, #4]
 8002c36:	89a3      	ldrh	r3, [r4, #12]
 8002c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c3c:	0719      	lsls	r1, r3, #28
 8002c3e:	d42c      	bmi.n	8002c9a <__swsetup_r+0x82>
 8002c40:	06dd      	lsls	r5, r3, #27
 8002c42:	d411      	bmi.n	8002c68 <__swsetup_r+0x50>
 8002c44:	2309      	movs	r3, #9
 8002c46:	6033      	str	r3, [r6, #0]
 8002c48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002c4c:	81a3      	strh	r3, [r4, #12]
 8002c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c52:	e03e      	b.n	8002cd2 <__swsetup_r+0xba>
 8002c54:	4b25      	ldr	r3, [pc, #148]	; (8002cec <__swsetup_r+0xd4>)
 8002c56:	429c      	cmp	r4, r3
 8002c58:	d101      	bne.n	8002c5e <__swsetup_r+0x46>
 8002c5a:	68ac      	ldr	r4, [r5, #8]
 8002c5c:	e7eb      	b.n	8002c36 <__swsetup_r+0x1e>
 8002c5e:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <__swsetup_r+0xd8>)
 8002c60:	429c      	cmp	r4, r3
 8002c62:	bf08      	it	eq
 8002c64:	68ec      	ldreq	r4, [r5, #12]
 8002c66:	e7e6      	b.n	8002c36 <__swsetup_r+0x1e>
 8002c68:	0758      	lsls	r0, r3, #29
 8002c6a:	d512      	bpl.n	8002c92 <__swsetup_r+0x7a>
 8002c6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c6e:	b141      	cbz	r1, 8002c82 <__swsetup_r+0x6a>
 8002c70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c74:	4299      	cmp	r1, r3
 8002c76:	d002      	beq.n	8002c7e <__swsetup_r+0x66>
 8002c78:	4630      	mov	r0, r6
 8002c7a:	f000 fa5b 	bl	8003134 <_free_r>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	6363      	str	r3, [r4, #52]	; 0x34
 8002c82:	89a3      	ldrh	r3, [r4, #12]
 8002c84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c88:	81a3      	strh	r3, [r4, #12]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	6063      	str	r3, [r4, #4]
 8002c8e:	6923      	ldr	r3, [r4, #16]
 8002c90:	6023      	str	r3, [r4, #0]
 8002c92:	89a3      	ldrh	r3, [r4, #12]
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	81a3      	strh	r3, [r4, #12]
 8002c9a:	6923      	ldr	r3, [r4, #16]
 8002c9c:	b94b      	cbnz	r3, 8002cb2 <__swsetup_r+0x9a>
 8002c9e:	89a3      	ldrh	r3, [r4, #12]
 8002ca0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca8:	d003      	beq.n	8002cb2 <__swsetup_r+0x9a>
 8002caa:	4621      	mov	r1, r4
 8002cac:	4630      	mov	r0, r6
 8002cae:	f000 fa01 	bl	80030b4 <__smakebuf_r>
 8002cb2:	89a0      	ldrh	r0, [r4, #12]
 8002cb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002cb8:	f010 0301 	ands.w	r3, r0, #1
 8002cbc:	d00a      	beq.n	8002cd4 <__swsetup_r+0xbc>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60a3      	str	r3, [r4, #8]
 8002cc2:	6963      	ldr	r3, [r4, #20]
 8002cc4:	425b      	negs	r3, r3
 8002cc6:	61a3      	str	r3, [r4, #24]
 8002cc8:	6923      	ldr	r3, [r4, #16]
 8002cca:	b943      	cbnz	r3, 8002cde <__swsetup_r+0xc6>
 8002ccc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002cd0:	d1ba      	bne.n	8002c48 <__swsetup_r+0x30>
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
 8002cd4:	0781      	lsls	r1, r0, #30
 8002cd6:	bf58      	it	pl
 8002cd8:	6963      	ldrpl	r3, [r4, #20]
 8002cda:	60a3      	str	r3, [r4, #8]
 8002cdc:	e7f4      	b.n	8002cc8 <__swsetup_r+0xb0>
 8002cde:	2000      	movs	r0, #0
 8002ce0:	e7f7      	b.n	8002cd2 <__swsetup_r+0xba>
 8002ce2:	bf00      	nop
 8002ce4:	2000000c 	.word	0x2000000c
 8002ce8:	080036b0 	.word	0x080036b0
 8002cec:	080036d0 	.word	0x080036d0
 8002cf0:	08003690 	.word	0x08003690

08002cf4 <__sflush_r>:
 8002cf4:	898a      	ldrh	r2, [r1, #12]
 8002cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cfa:	4605      	mov	r5, r0
 8002cfc:	0710      	lsls	r0, r2, #28
 8002cfe:	460c      	mov	r4, r1
 8002d00:	d458      	bmi.n	8002db4 <__sflush_r+0xc0>
 8002d02:	684b      	ldr	r3, [r1, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	dc05      	bgt.n	8002d14 <__sflush_r+0x20>
 8002d08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	dc02      	bgt.n	8002d14 <__sflush_r+0x20>
 8002d0e:	2000      	movs	r0, #0
 8002d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d16:	2e00      	cmp	r6, #0
 8002d18:	d0f9      	beq.n	8002d0e <__sflush_r+0x1a>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d20:	682f      	ldr	r7, [r5, #0]
 8002d22:	602b      	str	r3, [r5, #0]
 8002d24:	d032      	beq.n	8002d8c <__sflush_r+0x98>
 8002d26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d28:	89a3      	ldrh	r3, [r4, #12]
 8002d2a:	075a      	lsls	r2, r3, #29
 8002d2c:	d505      	bpl.n	8002d3a <__sflush_r+0x46>
 8002d2e:	6863      	ldr	r3, [r4, #4]
 8002d30:	1ac0      	subs	r0, r0, r3
 8002d32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d34:	b10b      	cbz	r3, 8002d3a <__sflush_r+0x46>
 8002d36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d38:	1ac0      	subs	r0, r0, r3
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d40:	6a21      	ldr	r1, [r4, #32]
 8002d42:	4628      	mov	r0, r5
 8002d44:	47b0      	blx	r6
 8002d46:	1c43      	adds	r3, r0, #1
 8002d48:	89a3      	ldrh	r3, [r4, #12]
 8002d4a:	d106      	bne.n	8002d5a <__sflush_r+0x66>
 8002d4c:	6829      	ldr	r1, [r5, #0]
 8002d4e:	291d      	cmp	r1, #29
 8002d50:	d82c      	bhi.n	8002dac <__sflush_r+0xb8>
 8002d52:	4a2a      	ldr	r2, [pc, #168]	; (8002dfc <__sflush_r+0x108>)
 8002d54:	40ca      	lsrs	r2, r1
 8002d56:	07d6      	lsls	r6, r2, #31
 8002d58:	d528      	bpl.n	8002dac <__sflush_r+0xb8>
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	6062      	str	r2, [r4, #4]
 8002d5e:	04d9      	lsls	r1, r3, #19
 8002d60:	6922      	ldr	r2, [r4, #16]
 8002d62:	6022      	str	r2, [r4, #0]
 8002d64:	d504      	bpl.n	8002d70 <__sflush_r+0x7c>
 8002d66:	1c42      	adds	r2, r0, #1
 8002d68:	d101      	bne.n	8002d6e <__sflush_r+0x7a>
 8002d6a:	682b      	ldr	r3, [r5, #0]
 8002d6c:	b903      	cbnz	r3, 8002d70 <__sflush_r+0x7c>
 8002d6e:	6560      	str	r0, [r4, #84]	; 0x54
 8002d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d72:	602f      	str	r7, [r5, #0]
 8002d74:	2900      	cmp	r1, #0
 8002d76:	d0ca      	beq.n	8002d0e <__sflush_r+0x1a>
 8002d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d7c:	4299      	cmp	r1, r3
 8002d7e:	d002      	beq.n	8002d86 <__sflush_r+0x92>
 8002d80:	4628      	mov	r0, r5
 8002d82:	f000 f9d7 	bl	8003134 <_free_r>
 8002d86:	2000      	movs	r0, #0
 8002d88:	6360      	str	r0, [r4, #52]	; 0x34
 8002d8a:	e7c1      	b.n	8002d10 <__sflush_r+0x1c>
 8002d8c:	6a21      	ldr	r1, [r4, #32]
 8002d8e:	2301      	movs	r3, #1
 8002d90:	4628      	mov	r0, r5
 8002d92:	47b0      	blx	r6
 8002d94:	1c41      	adds	r1, r0, #1
 8002d96:	d1c7      	bne.n	8002d28 <__sflush_r+0x34>
 8002d98:	682b      	ldr	r3, [r5, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0c4      	beq.n	8002d28 <__sflush_r+0x34>
 8002d9e:	2b1d      	cmp	r3, #29
 8002da0:	d001      	beq.n	8002da6 <__sflush_r+0xb2>
 8002da2:	2b16      	cmp	r3, #22
 8002da4:	d101      	bne.n	8002daa <__sflush_r+0xb6>
 8002da6:	602f      	str	r7, [r5, #0]
 8002da8:	e7b1      	b.n	8002d0e <__sflush_r+0x1a>
 8002daa:	89a3      	ldrh	r3, [r4, #12]
 8002dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db0:	81a3      	strh	r3, [r4, #12]
 8002db2:	e7ad      	b.n	8002d10 <__sflush_r+0x1c>
 8002db4:	690f      	ldr	r7, [r1, #16]
 8002db6:	2f00      	cmp	r7, #0
 8002db8:	d0a9      	beq.n	8002d0e <__sflush_r+0x1a>
 8002dba:	0793      	lsls	r3, r2, #30
 8002dbc:	680e      	ldr	r6, [r1, #0]
 8002dbe:	bf08      	it	eq
 8002dc0:	694b      	ldreq	r3, [r1, #20]
 8002dc2:	600f      	str	r7, [r1, #0]
 8002dc4:	bf18      	it	ne
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	eba6 0807 	sub.w	r8, r6, r7
 8002dcc:	608b      	str	r3, [r1, #8]
 8002dce:	f1b8 0f00 	cmp.w	r8, #0
 8002dd2:	dd9c      	ble.n	8002d0e <__sflush_r+0x1a>
 8002dd4:	6a21      	ldr	r1, [r4, #32]
 8002dd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002dd8:	4643      	mov	r3, r8
 8002dda:	463a      	mov	r2, r7
 8002ddc:	4628      	mov	r0, r5
 8002dde:	47b0      	blx	r6
 8002de0:	2800      	cmp	r0, #0
 8002de2:	dc06      	bgt.n	8002df2 <__sflush_r+0xfe>
 8002de4:	89a3      	ldrh	r3, [r4, #12]
 8002de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dea:	81a3      	strh	r3, [r4, #12]
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	e78e      	b.n	8002d10 <__sflush_r+0x1c>
 8002df2:	4407      	add	r7, r0
 8002df4:	eba8 0800 	sub.w	r8, r8, r0
 8002df8:	e7e9      	b.n	8002dce <__sflush_r+0xda>
 8002dfa:	bf00      	nop
 8002dfc:	20400001 	.word	0x20400001

08002e00 <_fflush_r>:
 8002e00:	b538      	push	{r3, r4, r5, lr}
 8002e02:	690b      	ldr	r3, [r1, #16]
 8002e04:	4605      	mov	r5, r0
 8002e06:	460c      	mov	r4, r1
 8002e08:	b913      	cbnz	r3, 8002e10 <_fflush_r+0x10>
 8002e0a:	2500      	movs	r5, #0
 8002e0c:	4628      	mov	r0, r5
 8002e0e:	bd38      	pop	{r3, r4, r5, pc}
 8002e10:	b118      	cbz	r0, 8002e1a <_fflush_r+0x1a>
 8002e12:	6983      	ldr	r3, [r0, #24]
 8002e14:	b90b      	cbnz	r3, 8002e1a <_fflush_r+0x1a>
 8002e16:	f000 f887 	bl	8002f28 <__sinit>
 8002e1a:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <_fflush_r+0x6c>)
 8002e1c:	429c      	cmp	r4, r3
 8002e1e:	d11b      	bne.n	8002e58 <_fflush_r+0x58>
 8002e20:	686c      	ldr	r4, [r5, #4]
 8002e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0ef      	beq.n	8002e0a <_fflush_r+0xa>
 8002e2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e2c:	07d0      	lsls	r0, r2, #31
 8002e2e:	d404      	bmi.n	8002e3a <_fflush_r+0x3a>
 8002e30:	0599      	lsls	r1, r3, #22
 8002e32:	d402      	bmi.n	8002e3a <_fflush_r+0x3a>
 8002e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e36:	f000 f915 	bl	8003064 <__retarget_lock_acquire_recursive>
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	f7ff ff59 	bl	8002cf4 <__sflush_r>
 8002e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e44:	07da      	lsls	r2, r3, #31
 8002e46:	4605      	mov	r5, r0
 8002e48:	d4e0      	bmi.n	8002e0c <_fflush_r+0xc>
 8002e4a:	89a3      	ldrh	r3, [r4, #12]
 8002e4c:	059b      	lsls	r3, r3, #22
 8002e4e:	d4dd      	bmi.n	8002e0c <_fflush_r+0xc>
 8002e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e52:	f000 f908 	bl	8003066 <__retarget_lock_release_recursive>
 8002e56:	e7d9      	b.n	8002e0c <_fflush_r+0xc>
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <_fflush_r+0x70>)
 8002e5a:	429c      	cmp	r4, r3
 8002e5c:	d101      	bne.n	8002e62 <_fflush_r+0x62>
 8002e5e:	68ac      	ldr	r4, [r5, #8]
 8002e60:	e7df      	b.n	8002e22 <_fflush_r+0x22>
 8002e62:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <_fflush_r+0x74>)
 8002e64:	429c      	cmp	r4, r3
 8002e66:	bf08      	it	eq
 8002e68:	68ec      	ldreq	r4, [r5, #12]
 8002e6a:	e7da      	b.n	8002e22 <_fflush_r+0x22>
 8002e6c:	080036b0 	.word	0x080036b0
 8002e70:	080036d0 	.word	0x080036d0
 8002e74:	08003690 	.word	0x08003690

08002e78 <std>:
 8002e78:	2300      	movs	r3, #0
 8002e7a:	b510      	push	{r4, lr}
 8002e7c:	4604      	mov	r4, r0
 8002e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8002e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e86:	6083      	str	r3, [r0, #8]
 8002e88:	8181      	strh	r1, [r0, #12]
 8002e8a:	6643      	str	r3, [r0, #100]	; 0x64
 8002e8c:	81c2      	strh	r2, [r0, #14]
 8002e8e:	6183      	str	r3, [r0, #24]
 8002e90:	4619      	mov	r1, r3
 8002e92:	2208      	movs	r2, #8
 8002e94:	305c      	adds	r0, #92	; 0x5c
 8002e96:	f7ff fdd9 	bl	8002a4c <memset>
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <std+0x38>)
 8002e9c:	6263      	str	r3, [r4, #36]	; 0x24
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <std+0x3c>)
 8002ea0:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <std+0x40>)
 8002ea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <std+0x44>)
 8002ea8:	6224      	str	r4, [r4, #32]
 8002eaa:	6323      	str	r3, [r4, #48]	; 0x30
 8002eac:	bd10      	pop	{r4, pc}
 8002eae:	bf00      	nop
 8002eb0:	080033a5 	.word	0x080033a5
 8002eb4:	080033c7 	.word	0x080033c7
 8002eb8:	080033ff 	.word	0x080033ff
 8002ebc:	08003423 	.word	0x08003423

08002ec0 <_cleanup_r>:
 8002ec0:	4901      	ldr	r1, [pc, #4]	; (8002ec8 <_cleanup_r+0x8>)
 8002ec2:	f000 b8af 	b.w	8003024 <_fwalk_reent>
 8002ec6:	bf00      	nop
 8002ec8:	08002e01 	.word	0x08002e01

08002ecc <__sfmoreglue>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	2268      	movs	r2, #104	; 0x68
 8002ed0:	1e4d      	subs	r5, r1, #1
 8002ed2:	4355      	muls	r5, r2
 8002ed4:	460e      	mov	r6, r1
 8002ed6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002eda:	f000 f997 	bl	800320c <_malloc_r>
 8002ede:	4604      	mov	r4, r0
 8002ee0:	b140      	cbz	r0, 8002ef4 <__sfmoreglue+0x28>
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	e9c0 1600 	strd	r1, r6, [r0]
 8002ee8:	300c      	adds	r0, #12
 8002eea:	60a0      	str	r0, [r4, #8]
 8002eec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ef0:	f7ff fdac 	bl	8002a4c <memset>
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	bd70      	pop	{r4, r5, r6, pc}

08002ef8 <__sfp_lock_acquire>:
 8002ef8:	4801      	ldr	r0, [pc, #4]	; (8002f00 <__sfp_lock_acquire+0x8>)
 8002efa:	f000 b8b3 	b.w	8003064 <__retarget_lock_acquire_recursive>
 8002efe:	bf00      	nop
 8002f00:	20000165 	.word	0x20000165

08002f04 <__sfp_lock_release>:
 8002f04:	4801      	ldr	r0, [pc, #4]	; (8002f0c <__sfp_lock_release+0x8>)
 8002f06:	f000 b8ae 	b.w	8003066 <__retarget_lock_release_recursive>
 8002f0a:	bf00      	nop
 8002f0c:	20000165 	.word	0x20000165

08002f10 <__sinit_lock_acquire>:
 8002f10:	4801      	ldr	r0, [pc, #4]	; (8002f18 <__sinit_lock_acquire+0x8>)
 8002f12:	f000 b8a7 	b.w	8003064 <__retarget_lock_acquire_recursive>
 8002f16:	bf00      	nop
 8002f18:	20000166 	.word	0x20000166

08002f1c <__sinit_lock_release>:
 8002f1c:	4801      	ldr	r0, [pc, #4]	; (8002f24 <__sinit_lock_release+0x8>)
 8002f1e:	f000 b8a2 	b.w	8003066 <__retarget_lock_release_recursive>
 8002f22:	bf00      	nop
 8002f24:	20000166 	.word	0x20000166

08002f28 <__sinit>:
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	f7ff fff0 	bl	8002f10 <__sinit_lock_acquire>
 8002f30:	69a3      	ldr	r3, [r4, #24]
 8002f32:	b11b      	cbz	r3, 8002f3c <__sinit+0x14>
 8002f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f38:	f7ff bff0 	b.w	8002f1c <__sinit_lock_release>
 8002f3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002f40:	6523      	str	r3, [r4, #80]	; 0x50
 8002f42:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <__sinit+0x68>)
 8002f44:	4a13      	ldr	r2, [pc, #76]	; (8002f94 <__sinit+0x6c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	62a2      	str	r2, [r4, #40]	; 0x28
 8002f4a:	42a3      	cmp	r3, r4
 8002f4c:	bf04      	itt	eq
 8002f4e:	2301      	moveq	r3, #1
 8002f50:	61a3      	streq	r3, [r4, #24]
 8002f52:	4620      	mov	r0, r4
 8002f54:	f000 f820 	bl	8002f98 <__sfp>
 8002f58:	6060      	str	r0, [r4, #4]
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f000 f81c 	bl	8002f98 <__sfp>
 8002f60:	60a0      	str	r0, [r4, #8]
 8002f62:	4620      	mov	r0, r4
 8002f64:	f000 f818 	bl	8002f98 <__sfp>
 8002f68:	2200      	movs	r2, #0
 8002f6a:	60e0      	str	r0, [r4, #12]
 8002f6c:	2104      	movs	r1, #4
 8002f6e:	6860      	ldr	r0, [r4, #4]
 8002f70:	f7ff ff82 	bl	8002e78 <std>
 8002f74:	68a0      	ldr	r0, [r4, #8]
 8002f76:	2201      	movs	r2, #1
 8002f78:	2109      	movs	r1, #9
 8002f7a:	f7ff ff7d 	bl	8002e78 <std>
 8002f7e:	68e0      	ldr	r0, [r4, #12]
 8002f80:	2202      	movs	r2, #2
 8002f82:	2112      	movs	r1, #18
 8002f84:	f7ff ff78 	bl	8002e78 <std>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	61a3      	str	r3, [r4, #24]
 8002f8c:	e7d2      	b.n	8002f34 <__sinit+0xc>
 8002f8e:	bf00      	nop
 8002f90:	0800368c 	.word	0x0800368c
 8002f94:	08002ec1 	.word	0x08002ec1

08002f98 <__sfp>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	4607      	mov	r7, r0
 8002f9c:	f7ff ffac 	bl	8002ef8 <__sfp_lock_acquire>
 8002fa0:	4b1e      	ldr	r3, [pc, #120]	; (800301c <__sfp+0x84>)
 8002fa2:	681e      	ldr	r6, [r3, #0]
 8002fa4:	69b3      	ldr	r3, [r6, #24]
 8002fa6:	b913      	cbnz	r3, 8002fae <__sfp+0x16>
 8002fa8:	4630      	mov	r0, r6
 8002faa:	f7ff ffbd 	bl	8002f28 <__sinit>
 8002fae:	3648      	adds	r6, #72	; 0x48
 8002fb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	d503      	bpl.n	8002fc0 <__sfp+0x28>
 8002fb8:	6833      	ldr	r3, [r6, #0]
 8002fba:	b30b      	cbz	r3, 8003000 <__sfp+0x68>
 8002fbc:	6836      	ldr	r6, [r6, #0]
 8002fbe:	e7f7      	b.n	8002fb0 <__sfp+0x18>
 8002fc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002fc4:	b9d5      	cbnz	r5, 8002ffc <__sfp+0x64>
 8002fc6:	4b16      	ldr	r3, [pc, #88]	; (8003020 <__sfp+0x88>)
 8002fc8:	60e3      	str	r3, [r4, #12]
 8002fca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002fce:	6665      	str	r5, [r4, #100]	; 0x64
 8002fd0:	f000 f847 	bl	8003062 <__retarget_lock_init_recursive>
 8002fd4:	f7ff ff96 	bl	8002f04 <__sfp_lock_release>
 8002fd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002fdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002fe0:	6025      	str	r5, [r4, #0]
 8002fe2:	61a5      	str	r5, [r4, #24]
 8002fe4:	2208      	movs	r2, #8
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002fec:	f7ff fd2e 	bl	8002a4c <memset>
 8002ff0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002ff4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ffc:	3468      	adds	r4, #104	; 0x68
 8002ffe:	e7d9      	b.n	8002fb4 <__sfp+0x1c>
 8003000:	2104      	movs	r1, #4
 8003002:	4638      	mov	r0, r7
 8003004:	f7ff ff62 	bl	8002ecc <__sfmoreglue>
 8003008:	4604      	mov	r4, r0
 800300a:	6030      	str	r0, [r6, #0]
 800300c:	2800      	cmp	r0, #0
 800300e:	d1d5      	bne.n	8002fbc <__sfp+0x24>
 8003010:	f7ff ff78 	bl	8002f04 <__sfp_lock_release>
 8003014:	230c      	movs	r3, #12
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	e7ee      	b.n	8002ff8 <__sfp+0x60>
 800301a:	bf00      	nop
 800301c:	0800368c 	.word	0x0800368c
 8003020:	ffff0001 	.word	0xffff0001

08003024 <_fwalk_reent>:
 8003024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003028:	4606      	mov	r6, r0
 800302a:	4688      	mov	r8, r1
 800302c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003030:	2700      	movs	r7, #0
 8003032:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003036:	f1b9 0901 	subs.w	r9, r9, #1
 800303a:	d505      	bpl.n	8003048 <_fwalk_reent+0x24>
 800303c:	6824      	ldr	r4, [r4, #0]
 800303e:	2c00      	cmp	r4, #0
 8003040:	d1f7      	bne.n	8003032 <_fwalk_reent+0xe>
 8003042:	4638      	mov	r0, r7
 8003044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003048:	89ab      	ldrh	r3, [r5, #12]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d907      	bls.n	800305e <_fwalk_reent+0x3a>
 800304e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003052:	3301      	adds	r3, #1
 8003054:	d003      	beq.n	800305e <_fwalk_reent+0x3a>
 8003056:	4629      	mov	r1, r5
 8003058:	4630      	mov	r0, r6
 800305a:	47c0      	blx	r8
 800305c:	4307      	orrs	r7, r0
 800305e:	3568      	adds	r5, #104	; 0x68
 8003060:	e7e9      	b.n	8003036 <_fwalk_reent+0x12>

08003062 <__retarget_lock_init_recursive>:
 8003062:	4770      	bx	lr

08003064 <__retarget_lock_acquire_recursive>:
 8003064:	4770      	bx	lr

08003066 <__retarget_lock_release_recursive>:
 8003066:	4770      	bx	lr

08003068 <__swhatbuf_r>:
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	460e      	mov	r6, r1
 800306c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003070:	2900      	cmp	r1, #0
 8003072:	b096      	sub	sp, #88	; 0x58
 8003074:	4614      	mov	r4, r2
 8003076:	461d      	mov	r5, r3
 8003078:	da08      	bge.n	800308c <__swhatbuf_r+0x24>
 800307a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	602a      	str	r2, [r5, #0]
 8003082:	061a      	lsls	r2, r3, #24
 8003084:	d410      	bmi.n	80030a8 <__swhatbuf_r+0x40>
 8003086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800308a:	e00e      	b.n	80030aa <__swhatbuf_r+0x42>
 800308c:	466a      	mov	r2, sp
 800308e:	f000 f9ef 	bl	8003470 <_fstat_r>
 8003092:	2800      	cmp	r0, #0
 8003094:	dbf1      	blt.n	800307a <__swhatbuf_r+0x12>
 8003096:	9a01      	ldr	r2, [sp, #4]
 8003098:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800309c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80030a0:	425a      	negs	r2, r3
 80030a2:	415a      	adcs	r2, r3
 80030a4:	602a      	str	r2, [r5, #0]
 80030a6:	e7ee      	b.n	8003086 <__swhatbuf_r+0x1e>
 80030a8:	2340      	movs	r3, #64	; 0x40
 80030aa:	2000      	movs	r0, #0
 80030ac:	6023      	str	r3, [r4, #0]
 80030ae:	b016      	add	sp, #88	; 0x58
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080030b4 <__smakebuf_r>:
 80030b4:	898b      	ldrh	r3, [r1, #12]
 80030b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030b8:	079d      	lsls	r5, r3, #30
 80030ba:	4606      	mov	r6, r0
 80030bc:	460c      	mov	r4, r1
 80030be:	d507      	bpl.n	80030d0 <__smakebuf_r+0x1c>
 80030c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80030c4:	6023      	str	r3, [r4, #0]
 80030c6:	6123      	str	r3, [r4, #16]
 80030c8:	2301      	movs	r3, #1
 80030ca:	6163      	str	r3, [r4, #20]
 80030cc:	b002      	add	sp, #8
 80030ce:	bd70      	pop	{r4, r5, r6, pc}
 80030d0:	ab01      	add	r3, sp, #4
 80030d2:	466a      	mov	r2, sp
 80030d4:	f7ff ffc8 	bl	8003068 <__swhatbuf_r>
 80030d8:	9900      	ldr	r1, [sp, #0]
 80030da:	4605      	mov	r5, r0
 80030dc:	4630      	mov	r0, r6
 80030de:	f000 f895 	bl	800320c <_malloc_r>
 80030e2:	b948      	cbnz	r0, 80030f8 <__smakebuf_r+0x44>
 80030e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030e8:	059a      	lsls	r2, r3, #22
 80030ea:	d4ef      	bmi.n	80030cc <__smakebuf_r+0x18>
 80030ec:	f023 0303 	bic.w	r3, r3, #3
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	81a3      	strh	r3, [r4, #12]
 80030f6:	e7e3      	b.n	80030c0 <__smakebuf_r+0xc>
 80030f8:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <__smakebuf_r+0x7c>)
 80030fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80030fc:	89a3      	ldrh	r3, [r4, #12]
 80030fe:	6020      	str	r0, [r4, #0]
 8003100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003104:	81a3      	strh	r3, [r4, #12]
 8003106:	9b00      	ldr	r3, [sp, #0]
 8003108:	6163      	str	r3, [r4, #20]
 800310a:	9b01      	ldr	r3, [sp, #4]
 800310c:	6120      	str	r0, [r4, #16]
 800310e:	b15b      	cbz	r3, 8003128 <__smakebuf_r+0x74>
 8003110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003114:	4630      	mov	r0, r6
 8003116:	f000 f9bd 	bl	8003494 <_isatty_r>
 800311a:	b128      	cbz	r0, 8003128 <__smakebuf_r+0x74>
 800311c:	89a3      	ldrh	r3, [r4, #12]
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	81a3      	strh	r3, [r4, #12]
 8003128:	89a0      	ldrh	r0, [r4, #12]
 800312a:	4305      	orrs	r5, r0
 800312c:	81a5      	strh	r5, [r4, #12]
 800312e:	e7cd      	b.n	80030cc <__smakebuf_r+0x18>
 8003130:	08002ec1 	.word	0x08002ec1

08003134 <_free_r>:
 8003134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003136:	2900      	cmp	r1, #0
 8003138:	d044      	beq.n	80031c4 <_free_r+0x90>
 800313a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800313e:	9001      	str	r0, [sp, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f1a1 0404 	sub.w	r4, r1, #4
 8003146:	bfb8      	it	lt
 8003148:	18e4      	addlt	r4, r4, r3
 800314a:	f000 f9c5 	bl	80034d8 <__malloc_lock>
 800314e:	4a1e      	ldr	r2, [pc, #120]	; (80031c8 <_free_r+0x94>)
 8003150:	9801      	ldr	r0, [sp, #4]
 8003152:	6813      	ldr	r3, [r2, #0]
 8003154:	b933      	cbnz	r3, 8003164 <_free_r+0x30>
 8003156:	6063      	str	r3, [r4, #4]
 8003158:	6014      	str	r4, [r2, #0]
 800315a:	b003      	add	sp, #12
 800315c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003160:	f000 b9c0 	b.w	80034e4 <__malloc_unlock>
 8003164:	42a3      	cmp	r3, r4
 8003166:	d908      	bls.n	800317a <_free_r+0x46>
 8003168:	6825      	ldr	r5, [r4, #0]
 800316a:	1961      	adds	r1, r4, r5
 800316c:	428b      	cmp	r3, r1
 800316e:	bf01      	itttt	eq
 8003170:	6819      	ldreq	r1, [r3, #0]
 8003172:	685b      	ldreq	r3, [r3, #4]
 8003174:	1949      	addeq	r1, r1, r5
 8003176:	6021      	streq	r1, [r4, #0]
 8003178:	e7ed      	b.n	8003156 <_free_r+0x22>
 800317a:	461a      	mov	r2, r3
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	b10b      	cbz	r3, 8003184 <_free_r+0x50>
 8003180:	42a3      	cmp	r3, r4
 8003182:	d9fa      	bls.n	800317a <_free_r+0x46>
 8003184:	6811      	ldr	r1, [r2, #0]
 8003186:	1855      	adds	r5, r2, r1
 8003188:	42a5      	cmp	r5, r4
 800318a:	d10b      	bne.n	80031a4 <_free_r+0x70>
 800318c:	6824      	ldr	r4, [r4, #0]
 800318e:	4421      	add	r1, r4
 8003190:	1854      	adds	r4, r2, r1
 8003192:	42a3      	cmp	r3, r4
 8003194:	6011      	str	r1, [r2, #0]
 8003196:	d1e0      	bne.n	800315a <_free_r+0x26>
 8003198:	681c      	ldr	r4, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	6053      	str	r3, [r2, #4]
 800319e:	4421      	add	r1, r4
 80031a0:	6011      	str	r1, [r2, #0]
 80031a2:	e7da      	b.n	800315a <_free_r+0x26>
 80031a4:	d902      	bls.n	80031ac <_free_r+0x78>
 80031a6:	230c      	movs	r3, #12
 80031a8:	6003      	str	r3, [r0, #0]
 80031aa:	e7d6      	b.n	800315a <_free_r+0x26>
 80031ac:	6825      	ldr	r5, [r4, #0]
 80031ae:	1961      	adds	r1, r4, r5
 80031b0:	428b      	cmp	r3, r1
 80031b2:	bf04      	itt	eq
 80031b4:	6819      	ldreq	r1, [r3, #0]
 80031b6:	685b      	ldreq	r3, [r3, #4]
 80031b8:	6063      	str	r3, [r4, #4]
 80031ba:	bf04      	itt	eq
 80031bc:	1949      	addeq	r1, r1, r5
 80031be:	6021      	streq	r1, [r4, #0]
 80031c0:	6054      	str	r4, [r2, #4]
 80031c2:	e7ca      	b.n	800315a <_free_r+0x26>
 80031c4:	b003      	add	sp, #12
 80031c6:	bd30      	pop	{r4, r5, pc}
 80031c8:	20000168 	.word	0x20000168

080031cc <sbrk_aligned>:
 80031cc:	b570      	push	{r4, r5, r6, lr}
 80031ce:	4e0e      	ldr	r6, [pc, #56]	; (8003208 <sbrk_aligned+0x3c>)
 80031d0:	460c      	mov	r4, r1
 80031d2:	6831      	ldr	r1, [r6, #0]
 80031d4:	4605      	mov	r5, r0
 80031d6:	b911      	cbnz	r1, 80031de <sbrk_aligned+0x12>
 80031d8:	f000 f8d4 	bl	8003384 <_sbrk_r>
 80031dc:	6030      	str	r0, [r6, #0]
 80031de:	4621      	mov	r1, r4
 80031e0:	4628      	mov	r0, r5
 80031e2:	f000 f8cf 	bl	8003384 <_sbrk_r>
 80031e6:	1c43      	adds	r3, r0, #1
 80031e8:	d00a      	beq.n	8003200 <sbrk_aligned+0x34>
 80031ea:	1cc4      	adds	r4, r0, #3
 80031ec:	f024 0403 	bic.w	r4, r4, #3
 80031f0:	42a0      	cmp	r0, r4
 80031f2:	d007      	beq.n	8003204 <sbrk_aligned+0x38>
 80031f4:	1a21      	subs	r1, r4, r0
 80031f6:	4628      	mov	r0, r5
 80031f8:	f000 f8c4 	bl	8003384 <_sbrk_r>
 80031fc:	3001      	adds	r0, #1
 80031fe:	d101      	bne.n	8003204 <sbrk_aligned+0x38>
 8003200:	f04f 34ff 	mov.w	r4, #4294967295
 8003204:	4620      	mov	r0, r4
 8003206:	bd70      	pop	{r4, r5, r6, pc}
 8003208:	2000016c 	.word	0x2000016c

0800320c <_malloc_r>:
 800320c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003210:	1ccd      	adds	r5, r1, #3
 8003212:	f025 0503 	bic.w	r5, r5, #3
 8003216:	3508      	adds	r5, #8
 8003218:	2d0c      	cmp	r5, #12
 800321a:	bf38      	it	cc
 800321c:	250c      	movcc	r5, #12
 800321e:	2d00      	cmp	r5, #0
 8003220:	4607      	mov	r7, r0
 8003222:	db01      	blt.n	8003228 <_malloc_r+0x1c>
 8003224:	42a9      	cmp	r1, r5
 8003226:	d905      	bls.n	8003234 <_malloc_r+0x28>
 8003228:	230c      	movs	r3, #12
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	2600      	movs	r6, #0
 800322e:	4630      	mov	r0, r6
 8003230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003234:	4e2e      	ldr	r6, [pc, #184]	; (80032f0 <_malloc_r+0xe4>)
 8003236:	f000 f94f 	bl	80034d8 <__malloc_lock>
 800323a:	6833      	ldr	r3, [r6, #0]
 800323c:	461c      	mov	r4, r3
 800323e:	bb34      	cbnz	r4, 800328e <_malloc_r+0x82>
 8003240:	4629      	mov	r1, r5
 8003242:	4638      	mov	r0, r7
 8003244:	f7ff ffc2 	bl	80031cc <sbrk_aligned>
 8003248:	1c43      	adds	r3, r0, #1
 800324a:	4604      	mov	r4, r0
 800324c:	d14d      	bne.n	80032ea <_malloc_r+0xde>
 800324e:	6834      	ldr	r4, [r6, #0]
 8003250:	4626      	mov	r6, r4
 8003252:	2e00      	cmp	r6, #0
 8003254:	d140      	bne.n	80032d8 <_malloc_r+0xcc>
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	4631      	mov	r1, r6
 800325a:	4638      	mov	r0, r7
 800325c:	eb04 0803 	add.w	r8, r4, r3
 8003260:	f000 f890 	bl	8003384 <_sbrk_r>
 8003264:	4580      	cmp	r8, r0
 8003266:	d13a      	bne.n	80032de <_malloc_r+0xd2>
 8003268:	6821      	ldr	r1, [r4, #0]
 800326a:	3503      	adds	r5, #3
 800326c:	1a6d      	subs	r5, r5, r1
 800326e:	f025 0503 	bic.w	r5, r5, #3
 8003272:	3508      	adds	r5, #8
 8003274:	2d0c      	cmp	r5, #12
 8003276:	bf38      	it	cc
 8003278:	250c      	movcc	r5, #12
 800327a:	4629      	mov	r1, r5
 800327c:	4638      	mov	r0, r7
 800327e:	f7ff ffa5 	bl	80031cc <sbrk_aligned>
 8003282:	3001      	adds	r0, #1
 8003284:	d02b      	beq.n	80032de <_malloc_r+0xd2>
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	442b      	add	r3, r5
 800328a:	6023      	str	r3, [r4, #0]
 800328c:	e00e      	b.n	80032ac <_malloc_r+0xa0>
 800328e:	6822      	ldr	r2, [r4, #0]
 8003290:	1b52      	subs	r2, r2, r5
 8003292:	d41e      	bmi.n	80032d2 <_malloc_r+0xc6>
 8003294:	2a0b      	cmp	r2, #11
 8003296:	d916      	bls.n	80032c6 <_malloc_r+0xba>
 8003298:	1961      	adds	r1, r4, r5
 800329a:	42a3      	cmp	r3, r4
 800329c:	6025      	str	r5, [r4, #0]
 800329e:	bf18      	it	ne
 80032a0:	6059      	strne	r1, [r3, #4]
 80032a2:	6863      	ldr	r3, [r4, #4]
 80032a4:	bf08      	it	eq
 80032a6:	6031      	streq	r1, [r6, #0]
 80032a8:	5162      	str	r2, [r4, r5]
 80032aa:	604b      	str	r3, [r1, #4]
 80032ac:	4638      	mov	r0, r7
 80032ae:	f104 060b 	add.w	r6, r4, #11
 80032b2:	f000 f917 	bl	80034e4 <__malloc_unlock>
 80032b6:	f026 0607 	bic.w	r6, r6, #7
 80032ba:	1d23      	adds	r3, r4, #4
 80032bc:	1af2      	subs	r2, r6, r3
 80032be:	d0b6      	beq.n	800322e <_malloc_r+0x22>
 80032c0:	1b9b      	subs	r3, r3, r6
 80032c2:	50a3      	str	r3, [r4, r2]
 80032c4:	e7b3      	b.n	800322e <_malloc_r+0x22>
 80032c6:	6862      	ldr	r2, [r4, #4]
 80032c8:	42a3      	cmp	r3, r4
 80032ca:	bf0c      	ite	eq
 80032cc:	6032      	streq	r2, [r6, #0]
 80032ce:	605a      	strne	r2, [r3, #4]
 80032d0:	e7ec      	b.n	80032ac <_malloc_r+0xa0>
 80032d2:	4623      	mov	r3, r4
 80032d4:	6864      	ldr	r4, [r4, #4]
 80032d6:	e7b2      	b.n	800323e <_malloc_r+0x32>
 80032d8:	4634      	mov	r4, r6
 80032da:	6876      	ldr	r6, [r6, #4]
 80032dc:	e7b9      	b.n	8003252 <_malloc_r+0x46>
 80032de:	230c      	movs	r3, #12
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	4638      	mov	r0, r7
 80032e4:	f000 f8fe 	bl	80034e4 <__malloc_unlock>
 80032e8:	e7a1      	b.n	800322e <_malloc_r+0x22>
 80032ea:	6025      	str	r5, [r4, #0]
 80032ec:	e7de      	b.n	80032ac <_malloc_r+0xa0>
 80032ee:	bf00      	nop
 80032f0:	20000168 	.word	0x20000168

080032f4 <_putc_r>:
 80032f4:	b570      	push	{r4, r5, r6, lr}
 80032f6:	460d      	mov	r5, r1
 80032f8:	4614      	mov	r4, r2
 80032fa:	4606      	mov	r6, r0
 80032fc:	b118      	cbz	r0, 8003306 <_putc_r+0x12>
 80032fe:	6983      	ldr	r3, [r0, #24]
 8003300:	b90b      	cbnz	r3, 8003306 <_putc_r+0x12>
 8003302:	f7ff fe11 	bl	8002f28 <__sinit>
 8003306:	4b1c      	ldr	r3, [pc, #112]	; (8003378 <_putc_r+0x84>)
 8003308:	429c      	cmp	r4, r3
 800330a:	d124      	bne.n	8003356 <_putc_r+0x62>
 800330c:	6874      	ldr	r4, [r6, #4]
 800330e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003310:	07d8      	lsls	r0, r3, #31
 8003312:	d405      	bmi.n	8003320 <_putc_r+0x2c>
 8003314:	89a3      	ldrh	r3, [r4, #12]
 8003316:	0599      	lsls	r1, r3, #22
 8003318:	d402      	bmi.n	8003320 <_putc_r+0x2c>
 800331a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800331c:	f7ff fea2 	bl	8003064 <__retarget_lock_acquire_recursive>
 8003320:	68a3      	ldr	r3, [r4, #8]
 8003322:	3b01      	subs	r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	60a3      	str	r3, [r4, #8]
 8003328:	da05      	bge.n	8003336 <_putc_r+0x42>
 800332a:	69a2      	ldr	r2, [r4, #24]
 800332c:	4293      	cmp	r3, r2
 800332e:	db1c      	blt.n	800336a <_putc_r+0x76>
 8003330:	b2eb      	uxtb	r3, r5
 8003332:	2b0a      	cmp	r3, #10
 8003334:	d019      	beq.n	800336a <_putc_r+0x76>
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	6022      	str	r2, [r4, #0]
 800333c:	701d      	strb	r5, [r3, #0]
 800333e:	b2ed      	uxtb	r5, r5
 8003340:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003342:	07da      	lsls	r2, r3, #31
 8003344:	d405      	bmi.n	8003352 <_putc_r+0x5e>
 8003346:	89a3      	ldrh	r3, [r4, #12]
 8003348:	059b      	lsls	r3, r3, #22
 800334a:	d402      	bmi.n	8003352 <_putc_r+0x5e>
 800334c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800334e:	f7ff fe8a 	bl	8003066 <__retarget_lock_release_recursive>
 8003352:	4628      	mov	r0, r5
 8003354:	bd70      	pop	{r4, r5, r6, pc}
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <_putc_r+0x88>)
 8003358:	429c      	cmp	r4, r3
 800335a:	d101      	bne.n	8003360 <_putc_r+0x6c>
 800335c:	68b4      	ldr	r4, [r6, #8]
 800335e:	e7d6      	b.n	800330e <_putc_r+0x1a>
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <_putc_r+0x8c>)
 8003362:	429c      	cmp	r4, r3
 8003364:	bf08      	it	eq
 8003366:	68f4      	ldreq	r4, [r6, #12]
 8003368:	e7d1      	b.n	800330e <_putc_r+0x1a>
 800336a:	4629      	mov	r1, r5
 800336c:	4622      	mov	r2, r4
 800336e:	4630      	mov	r0, r6
 8003370:	f7ff fc00 	bl	8002b74 <__swbuf_r>
 8003374:	4605      	mov	r5, r0
 8003376:	e7e3      	b.n	8003340 <_putc_r+0x4c>
 8003378:	080036b0 	.word	0x080036b0
 800337c:	080036d0 	.word	0x080036d0
 8003380:	08003690 	.word	0x08003690

08003384 <_sbrk_r>:
 8003384:	b538      	push	{r3, r4, r5, lr}
 8003386:	4d06      	ldr	r5, [pc, #24]	; (80033a0 <_sbrk_r+0x1c>)
 8003388:	2300      	movs	r3, #0
 800338a:	4604      	mov	r4, r0
 800338c:	4608      	mov	r0, r1
 800338e:	602b      	str	r3, [r5, #0]
 8003390:	f7fd f920 	bl	80005d4 <_sbrk>
 8003394:	1c43      	adds	r3, r0, #1
 8003396:	d102      	bne.n	800339e <_sbrk_r+0x1a>
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	b103      	cbz	r3, 800339e <_sbrk_r+0x1a>
 800339c:	6023      	str	r3, [r4, #0]
 800339e:	bd38      	pop	{r3, r4, r5, pc}
 80033a0:	20000170 	.word	0x20000170

080033a4 <__sread>:
 80033a4:	b510      	push	{r4, lr}
 80033a6:	460c      	mov	r4, r1
 80033a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033ac:	f000 f8a0 	bl	80034f0 <_read_r>
 80033b0:	2800      	cmp	r0, #0
 80033b2:	bfab      	itete	ge
 80033b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80033b6:	89a3      	ldrhlt	r3, [r4, #12]
 80033b8:	181b      	addge	r3, r3, r0
 80033ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80033be:	bfac      	ite	ge
 80033c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80033c2:	81a3      	strhlt	r3, [r4, #12]
 80033c4:	bd10      	pop	{r4, pc}

080033c6 <__swrite>:
 80033c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033ca:	461f      	mov	r7, r3
 80033cc:	898b      	ldrh	r3, [r1, #12]
 80033ce:	05db      	lsls	r3, r3, #23
 80033d0:	4605      	mov	r5, r0
 80033d2:	460c      	mov	r4, r1
 80033d4:	4616      	mov	r6, r2
 80033d6:	d505      	bpl.n	80033e4 <__swrite+0x1e>
 80033d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033dc:	2302      	movs	r3, #2
 80033de:	2200      	movs	r2, #0
 80033e0:	f000 f868 	bl	80034b4 <_lseek_r>
 80033e4:	89a3      	ldrh	r3, [r4, #12]
 80033e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033ee:	81a3      	strh	r3, [r4, #12]
 80033f0:	4632      	mov	r2, r6
 80033f2:	463b      	mov	r3, r7
 80033f4:	4628      	mov	r0, r5
 80033f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033fa:	f000 b817 	b.w	800342c <_write_r>

080033fe <__sseek>:
 80033fe:	b510      	push	{r4, lr}
 8003400:	460c      	mov	r4, r1
 8003402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003406:	f000 f855 	bl	80034b4 <_lseek_r>
 800340a:	1c43      	adds	r3, r0, #1
 800340c:	89a3      	ldrh	r3, [r4, #12]
 800340e:	bf15      	itete	ne
 8003410:	6560      	strne	r0, [r4, #84]	; 0x54
 8003412:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003416:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800341a:	81a3      	strheq	r3, [r4, #12]
 800341c:	bf18      	it	ne
 800341e:	81a3      	strhne	r3, [r4, #12]
 8003420:	bd10      	pop	{r4, pc}

08003422 <__sclose>:
 8003422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003426:	f000 b813 	b.w	8003450 <_close_r>
	...

0800342c <_write_r>:
 800342c:	b538      	push	{r3, r4, r5, lr}
 800342e:	4d07      	ldr	r5, [pc, #28]	; (800344c <_write_r+0x20>)
 8003430:	4604      	mov	r4, r0
 8003432:	4608      	mov	r0, r1
 8003434:	4611      	mov	r1, r2
 8003436:	2200      	movs	r2, #0
 8003438:	602a      	str	r2, [r5, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	f7fc ff79 	bl	8000332 <_write>
 8003440:	1c43      	adds	r3, r0, #1
 8003442:	d102      	bne.n	800344a <_write_r+0x1e>
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	b103      	cbz	r3, 800344a <_write_r+0x1e>
 8003448:	6023      	str	r3, [r4, #0]
 800344a:	bd38      	pop	{r3, r4, r5, pc}
 800344c:	20000170 	.word	0x20000170

08003450 <_close_r>:
 8003450:	b538      	push	{r3, r4, r5, lr}
 8003452:	4d06      	ldr	r5, [pc, #24]	; (800346c <_close_r+0x1c>)
 8003454:	2300      	movs	r3, #0
 8003456:	4604      	mov	r4, r0
 8003458:	4608      	mov	r0, r1
 800345a:	602b      	str	r3, [r5, #0]
 800345c:	f7fd f885 	bl	800056a <_close>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d102      	bne.n	800346a <_close_r+0x1a>
 8003464:	682b      	ldr	r3, [r5, #0]
 8003466:	b103      	cbz	r3, 800346a <_close_r+0x1a>
 8003468:	6023      	str	r3, [r4, #0]
 800346a:	bd38      	pop	{r3, r4, r5, pc}
 800346c:	20000170 	.word	0x20000170

08003470 <_fstat_r>:
 8003470:	b538      	push	{r3, r4, r5, lr}
 8003472:	4d07      	ldr	r5, [pc, #28]	; (8003490 <_fstat_r+0x20>)
 8003474:	2300      	movs	r3, #0
 8003476:	4604      	mov	r4, r0
 8003478:	4608      	mov	r0, r1
 800347a:	4611      	mov	r1, r2
 800347c:	602b      	str	r3, [r5, #0]
 800347e:	f7fd f880 	bl	8000582 <_fstat>
 8003482:	1c43      	adds	r3, r0, #1
 8003484:	d102      	bne.n	800348c <_fstat_r+0x1c>
 8003486:	682b      	ldr	r3, [r5, #0]
 8003488:	b103      	cbz	r3, 800348c <_fstat_r+0x1c>
 800348a:	6023      	str	r3, [r4, #0]
 800348c:	bd38      	pop	{r3, r4, r5, pc}
 800348e:	bf00      	nop
 8003490:	20000170 	.word	0x20000170

08003494 <_isatty_r>:
 8003494:	b538      	push	{r3, r4, r5, lr}
 8003496:	4d06      	ldr	r5, [pc, #24]	; (80034b0 <_isatty_r+0x1c>)
 8003498:	2300      	movs	r3, #0
 800349a:	4604      	mov	r4, r0
 800349c:	4608      	mov	r0, r1
 800349e:	602b      	str	r3, [r5, #0]
 80034a0:	f7fd f87f 	bl	80005a2 <_isatty>
 80034a4:	1c43      	adds	r3, r0, #1
 80034a6:	d102      	bne.n	80034ae <_isatty_r+0x1a>
 80034a8:	682b      	ldr	r3, [r5, #0]
 80034aa:	b103      	cbz	r3, 80034ae <_isatty_r+0x1a>
 80034ac:	6023      	str	r3, [r4, #0]
 80034ae:	bd38      	pop	{r3, r4, r5, pc}
 80034b0:	20000170 	.word	0x20000170

080034b4 <_lseek_r>:
 80034b4:	b538      	push	{r3, r4, r5, lr}
 80034b6:	4d07      	ldr	r5, [pc, #28]	; (80034d4 <_lseek_r+0x20>)
 80034b8:	4604      	mov	r4, r0
 80034ba:	4608      	mov	r0, r1
 80034bc:	4611      	mov	r1, r2
 80034be:	2200      	movs	r2, #0
 80034c0:	602a      	str	r2, [r5, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	f7fd f878 	bl	80005b8 <_lseek>
 80034c8:	1c43      	adds	r3, r0, #1
 80034ca:	d102      	bne.n	80034d2 <_lseek_r+0x1e>
 80034cc:	682b      	ldr	r3, [r5, #0]
 80034ce:	b103      	cbz	r3, 80034d2 <_lseek_r+0x1e>
 80034d0:	6023      	str	r3, [r4, #0]
 80034d2:	bd38      	pop	{r3, r4, r5, pc}
 80034d4:	20000170 	.word	0x20000170

080034d8 <__malloc_lock>:
 80034d8:	4801      	ldr	r0, [pc, #4]	; (80034e0 <__malloc_lock+0x8>)
 80034da:	f7ff bdc3 	b.w	8003064 <__retarget_lock_acquire_recursive>
 80034de:	bf00      	nop
 80034e0:	20000164 	.word	0x20000164

080034e4 <__malloc_unlock>:
 80034e4:	4801      	ldr	r0, [pc, #4]	; (80034ec <__malloc_unlock+0x8>)
 80034e6:	f7ff bdbe 	b.w	8003066 <__retarget_lock_release_recursive>
 80034ea:	bf00      	nop
 80034ec:	20000164 	.word	0x20000164

080034f0 <_read_r>:
 80034f0:	b538      	push	{r3, r4, r5, lr}
 80034f2:	4d07      	ldr	r5, [pc, #28]	; (8003510 <_read_r+0x20>)
 80034f4:	4604      	mov	r4, r0
 80034f6:	4608      	mov	r0, r1
 80034f8:	4611      	mov	r1, r2
 80034fa:	2200      	movs	r2, #0
 80034fc:	602a      	str	r2, [r5, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	f7fd f816 	bl	8000530 <_read>
 8003504:	1c43      	adds	r3, r0, #1
 8003506:	d102      	bne.n	800350e <_read_r+0x1e>
 8003508:	682b      	ldr	r3, [r5, #0]
 800350a:	b103      	cbz	r3, 800350e <_read_r+0x1e>
 800350c:	6023      	str	r3, [r4, #0]
 800350e:	bd38      	pop	{r3, r4, r5, pc}
 8003510:	20000170 	.word	0x20000170

08003514 <_init>:
 8003514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003516:	bf00      	nop
 8003518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351a:	bc08      	pop	{r3}
 800351c:	469e      	mov	lr, r3
 800351e:	4770      	bx	lr

08003520 <_fini>:
 8003520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003522:	bf00      	nop
 8003524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003526:	bc08      	pop	{r3}
 8003528:	469e      	mov	lr, r3
 800352a:	4770      	bx	lr
